
DA2_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000764  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066a  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000321  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static unsigned char clk = 0;

int main(void)
{

	DDRD = 0xFF;	//PD.0-7 are set as outputs
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x31;	//PC.5 and PC.4 and PC.0 are set as outputs
  94:	81 e3       	ldi	r24, 0x31	; 49
  96:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;		//PC.0-7 OUT LOW
  98:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;		//PD.0-7 OUT LOW
  9a:	1b b8       	out	0x0b, r1	; 11

	while (1)
	{
		if( count == 255)
  9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	11 f4       	brne	.+4      	; 0xa8 <main+0x18>
			count = 0;
  a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>

		TCCR0A = 0;										//TIMER0: Normal Mode, internal clock
  a8:	14 bc       	out	0x24, r1	; 36
		TCCR0B = (1<<WGM02)|(1<<CS02)|(1<<CS00);		//TIMER0: enable, prescalar 1024 - 8MHz/1024
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;										//LOAD TIMER0 = 0
  ae:	16 bc       	out	0x26, r1	; 38
		OCR0A = 255;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A);							//Enable compare interrupts
  b4:	ee e6       	ldi	r30, 0x6E	; 110
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
		sei();
  be:	78 94       	sei

		while(1);										//wait for an overflow
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x30>

000000c2 <TOGG_5>:
}

char TOGG_5()
{
	unsigned char TOG5 = 0;
	TOG5 = 0x10 & PORTC;		//Grab the PC.4
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	80 71       	andi	r24, 0x10	; 16
	if(count5 == 5){			//Check if it's at it 5th rising edge
  c6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <count5>
  ca:	95 30       	cpi	r25, 0x05	; 5
  cc:	21 f4       	brne	.+8      	; 0xd6 <TOGG_5+0x14>
		count5 = 0;
  ce:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count5>
		TOG5 ^= 0x10;			//toggle and reset counter
  d2:	90 e1       	ldi	r25, 0x10	; 16
  d4:	89 27       	eor	r24, r25
	}
	//else do nothing
	return TOG5;
}
  d6:	08 95       	ret

000000d8 <TOGG_10>:
char TOGG_10()
{
	unsigned char TOG10 = 0;
	TOG10 = 0x20 & PORTC;	//Grab the PC.5
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	80 72       	andi	r24, 0x20	; 32
	if(count10 == 10){		//Check if it's at it 10th rising edge
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count10>
  e0:	9a 30       	cpi	r25, 0x0A	; 10
  e2:	21 f4       	brne	.+8      	; 0xec <TOGG_10+0x14>
		count10 = 0;
  e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count10>
		TOG10 ^= 0x20;		//toggle and reset counter
  e8:	90 e2       	ldi	r25, 0x20	; 32
  ea:	89 27       	eor	r24, r25
	}
	//else do nothing
	return TOG10;
}
  ec:	08 95       	ret

000000ee <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	cf 93       	push	r28
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	if(i == 6)
 112:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 116:	86 30       	cpi	r24, 0x06	; 6
 118:	09 f0       	breq	.+2      	; 0x11c <__vector_14+0x2e>
 11a:	41 c0       	rjmp	.+130    	; 0x19e <__vector_14+0xb0>
	{
		i = 0;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i>
		TCNT0 = 95;							//LOAD TIMER0 = 95
 120:	8f e5       	ldi	r24, 0x5F	; 95
 122:	86 bd       	out	0x26, r24	; 38
		while((TIFR0 & (1<<TOV0))== 0 );
 124:	a8 9b       	sbis	0x15, 0	; 21
 126:	fe cf       	rjmp	.-4      	; 0x124 <__vector_14+0x36>
		TIFR0 &= (1<<TOV0);					//clear the overflow(TOV0)
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	85 bb       	out	0x15, r24	; 21
		TCCR0B = 0;							//TIMER0: disable timer
 12e:	15 bc       	out	0x25, r1	; 37

		if(clk == 1)
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	e9 f4       	brne	.+58     	; 0x172 <__vector_14+0x84>
		{
			clk = 0;						//RESET CLK
 138:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			count++;						//Count = Count + 1;
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
			count10++;						//Count10 = Count10 + 1;
 146:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count10>
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count10>
			count5++;
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count5>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count5>

			PORTC = (TOGG_5()|TOGG_10()|0x01);
 15a:	0e 94 61 00 	call	0xc2	; 0xc2 <TOGG_5>
 15e:	c8 2f       	mov	r28, r24
 160:	0e 94 6c 00 	call	0xd8	; 0xd8 <TOGG_10>
 164:	8c 2b       	or	r24, r28
 166:	81 60       	ori	r24, 0x01	; 1
 168:	88 b9       	out	0x08, r24	; 8
			PORTD = count;						//OUTPUT CLOCK
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	0b c0       	rjmp	.+22     	; 0x188 <__vector_14+0x9a>
		}

		else if(clk == 0)
 172:	81 11       	cpse	r24, r1
 174:	09 c0       	rjmp	.+18     	; 0x188 <__vector_14+0x9a>
		{
			clk = 1;							//SET CLK
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTD = count;						//OUTPUT CLOCK
 17c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count>
 180:	9b b9       	out	0x0b, r25	; 11
			PORTC ^= 0x01;
 182:	98 b1       	in	r25, 0x08	; 8
 184:	89 27       	eor	r24, r25
 186:	88 b9       	out	0x08, r24	; 8
		}

		TCCR0B = (1<<WGM02)|(1<<CS02)|(1<<CS00);		//TIMER0: enable, prescalar 1024 - 8MHz/1024
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	85 bd       	out	0x25, r24	; 37
		TCNT0 = 0;										//LOAD TIMER0 = 0
 18c:	16 bc       	out	0x26, r1	; 38
		OCR0A = 255;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A);					//Enable compare interrupts
 192:	ee e6       	ldi	r30, 0x6E	; 110
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_14+0xbc>
	}

	else
	{
		++i;
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i>
		TIFR0 &= (1<<OCF0A);						//clear the overflow(TOV0)
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	82 70       	andi	r24, 0x02	; 2
 1a8:	85 bb       	out	0x15, r24	; 21
	}
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	cf 91       	pop	r28
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
