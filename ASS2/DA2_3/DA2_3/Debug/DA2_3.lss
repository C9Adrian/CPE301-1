
DA2_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000755  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065d  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e4  00000000  00000000  000016c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TOGG_5>:
}

char TOGG_5()
{
	unsigned char TOG5 = 0;
	TOG5 = 0x10 & PORTC;		//Grab the PC.4 
  90:	88 b1       	in	r24, 0x08	; 8
  92:	80 71       	andi	r24, 0x10	; 16
	if(count5 == 5){			//Check if it's at it 5th rising edge
  94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <count5>
  98:	95 30       	cpi	r25, 0x05	; 5
  9a:	21 f4       	brne	.+8      	; 0xa4 <TOGG_5+0x14>
		count5 = 0;
  9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count5>
		TOG5 ^= 0x10;			//toggle and reset counter
  a0:	90 e1       	ldi	r25, 0x10	; 16
  a2:	89 27       	eor	r24, r25
	}
								//else do nothing
	return TOG5;
}
  a4:	08 95       	ret

000000a6 <TOGG_10>:
char TOGG_10()
{
	unsigned char TOG10 = 0;
	TOG10 = 0x20 & PORTC;	//Grab the PC.5	
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	80 72       	andi	r24, 0x20	; 32
	if(count10 == 10){		//Check if it's at it 10th rising edge
  aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  ae:	9a 30       	cpi	r25, 0x0A	; 10
  b0:	21 f4       	brne	.+8      	; 0xba <TOGG_10+0x14>
		count10 = 0;
  b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		TOG10 ^= 0x20;		//toggle and reset counter
  b6:	90 e2       	ldi	r25, 0x20	; 32
  b8:	89 27       	eor	r24, r25
	}
							//else do nothing
	return TOG10;
}
  ba:	08 95       	ret

000000bc <main>:
int main(void)
{
	unsigned char clk = 0; 
	unsigned char count = 0;

    DDRD = 0xFF;	//PD.0-7 are set as outputs
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x31;	//PC.5 and PC.4 and PC.0 are set as outputs
  c0:	81 e3       	ldi	r24, 0x31	; 49
  c2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;		//PC.0-7 OUT LOW
  c4:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;		//PD.0-7 OUT LOW 
  c6:	1b b8       	out	0x0b, r1	; 11
volatile unsigned char count5 = 0;
volatile unsigned char count10 = 0;

int main(void)
{
	unsigned char clk = 0; 
  c8:	20 e0       	ldi	r18, 0x00	; 0
	unsigned char count = 0;
  ca:	c0 e0       	ldi	r28, 0x00	; 0
		//reset count 
		if( count == 255)
			count = 0;

		TCCR0A = 0;							//TIMER0: Normal Mode, internal clock
		TCCR0B = (1<<CS02)|(1<<CS00);		//TIMER0: enable, prescalar 1024 - 8MHz/1024
  cc:	0f 2e       	mov	r0, r31
  ce:	f5 e0       	ldi	r31, 0x05	; 5
  d0:	ff 2e       	mov	r15, r31
  d2:	f0 2d       	mov	r31, r0
  d4:	0e e0       	ldi	r16, 0x0E	; 14
			TIFR0 &= (1<<TOV0);						//clear the overflow(TOV0) 
		}

		//A Few more cycle to generate a more accurate
		//clock period
		TCNT0 = 95;							//LOAD TIMER0 = 95
  d6:	1f e5       	ldi	r17, 0x5F	; 95

		else if(clk == 0)
		{
			clk = 1;							//SET CLK
			PORTD = count;						//OUTPUT CLOCK
			PORTC ^= 0X01;						//toggle the CLK
  d8:	ee 24       	eor	r14, r14
  da:	e3 94       	inc	r14
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <main+0x28>
	PORTD = 0;		//PD.0-7 OUT LOW 

    while (1) 
	{
		//reset count 
		if( count == 255)
  de:	cf 3f       	cpi	r28, 0xFF	; 255
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x28>
			count = 0;
  e2:	c0 e0       	ldi	r28, 0x00	; 0

		TCCR0A = 0;							//TIMER0: Normal Mode, internal clock
  e4:	14 bc       	out	0x24, r1	; 36
		TCCR0B = (1<<CS02)|(1<<CS00);		//TIMER0: enable, prescalar 1024 - 8MHz/1024
  e6:	f5 bc       	out	0x25, r15	; 37
  e8:	90 2f       	mov	r25, r16

		//Inner loop count from 0 to 255
		//and this is done 7 time to genereate a period of about 0.5s
		for(unsigned char i = 0; i < 14; i++)
		{
			TCNT0 = 0;								//LOAD TIMER0 = 0
  ea:	16 bc       	out	0x26, r1	; 38
			while((TIFR0 & (1<< TOV0)) == 0);		//wait for an overflow
  ec:	a8 9b       	sbis	0x15, 0	; 21
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x30>
			TIFR0 &= (1<<TOV0);						//clear the overflow(TOV0) 
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	91 50       	subi	r25, 0x01	; 1
		TCCR0A = 0;							//TIMER0: Normal Mode, internal clock
		TCCR0B = (1<<CS02)|(1<<CS00);		//TIMER0: enable, prescalar 1024 - 8MHz/1024

		//Inner loop count from 0 to 255
		//and this is done 7 time to genereate a period of about 0.5s
		for(unsigned char i = 0; i < 14; i++)
  f8:	c1 f7       	brne	.-16     	; 0xea <main+0x2e>
			TIFR0 &= (1<<TOV0);						//clear the overflow(TOV0) 
		}

		//A Few more cycle to generate a more accurate
		//clock period
		TCNT0 = 95;							//LOAD TIMER0 = 95
  fa:	16 bd       	out	0x26, r17	; 38
		while((TIFR0 & (1<<TOV0))== 0 );
  fc:	a8 9b       	sbis	0x15, 0	; 21
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x40>
		TIFR0 &= (1<<TOV0);					//clear the overflow(TOV0) 
 100:	85 b3       	in	r24, 0x15	; 21
 102:	81 70       	andi	r24, 0x01	; 1
 104:	85 bb       	out	0x15, r24	; 21
		TCCR0B = 0;							//TIMER0: disable timer 
 106:	15 bc       	out	0x25, r1	; 37
		
		if(clk == 1)
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	b1 f4       	brne	.+44     	; 0x138 <main+0x7c>
		{
			clk = 0;						//RESET CLK
			count++;						//Count = Count + 1;
 10c:	cf 5f       	subi	r28, 0xFF	; 255
			count10++;						//Count10 = Count10 + 1; 
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			count5++;
 118:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count5>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count5>

			PORTC = (TOGG_5()|TOGG_10()| (0x01)); 
 122:	0e 94 48 00 	call	0x90	; 0x90 <TOGG_5>
 126:	d8 2f       	mov	r29, r24
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <TOGG_10>
 12c:	8d 2b       	or	r24, r29
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	88 b9       	out	0x08, r24	; 8
			PORTD = count;						//OUTPUT Count
 132:	cb b9       	out	0x0b, r28	; 11
		TIFR0 &= (1<<TOV0);					//clear the overflow(TOV0) 
		TCCR0B = 0;							//TIMER0: disable timer 
		
		if(clk == 1)
		{
			clk = 0;						//RESET CLK
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	d3 cf       	rjmp	.-90     	; 0xde <main+0x22>

			PORTC = (TOGG_5()|TOGG_10()| (0x01)); 
			PORTD = count;						//OUTPUT Count
		}

		else if(clk == 0)
 138:	21 11       	cpse	r18, r1
 13a:	d1 cf       	rjmp	.-94     	; 0xde <main+0x22>
		{
			clk = 1;							//SET CLK
			PORTD = count;						//OUTPUT CLOCK
 13c:	cb b9       	out	0x0b, r28	; 11
			PORTC ^= 0X01;						//toggle the CLK
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	8e 25       	eor	r24, r14
 142:	88 b9       	out	0x08, r24	; 8
			PORTD = count;						//OUTPUT Count
		}

		else if(clk == 0)
		{
			clk = 1;							//SET CLK
 144:	2e 2d       	mov	r18, r14
 146:	cb cf       	rjmp	.-106    	; 0xde <main+0x22>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
