
UART_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800120  00800120  00000a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f40  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000800  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a83  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000676  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c7  00000000  00000000  000037da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00003ea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  9e:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart0_init_>:
//F_CPU/1024
void TC1_PRESCALING_1024()   
{
	TCCR1B |= (1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B |= (1<<CS10);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	80 83       	st	Z, r24
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	10 82       	st	Z, r1
  d4:	80 81       	ld	r24, Z
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <putChar_>:
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	19 f4       	brne	.+6      	; 0xea <putChar_+0xe>
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	0e 94 6e 00 	call	0xdc	; 0xdc <putChar_>
  ea:	e0 ec       	ldi	r30, 0xC0	; 192
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	85 ff       	sbrs	r24, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <putChar_+0x12>
  f4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <printm>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	88 81       	ld	r24, Y
 104:	88 23       	and	r24, r24
 106:	31 f0       	breq	.+12     	; 0x114 <printm+0x18>
 108:	21 96       	adiw	r28, 0x01	; 1
 10a:	0e 94 6e 00 	call	0xdc	; 0xdc <putChar_>
 10e:	89 91       	ld	r24, Y+
 110:	81 11       	cpse	r24, r1
 112:	fb cf       	rjmp	.-10     	; 0x10a <printm+0xe>
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <TC1_FAST_PWM_S_TOP>:
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 61       	ori	r24, 0x10	; 16
 122:	80 83       	st	Z, r24
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
 12a:	e0 e8       	ldi	r30, 0x80	; 128
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <TC1_PRESCALING_64>:
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	80 83       	st	Z, r24
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <initateTimer1>:
	
	  /*Example*/
	  //TOP = (F_cpu/(Focnx*N))-1
	  //Desire Focnx = 50 Hz
	  //ICR1 = (uint_8)((16e6/(50*64))-1);
	  ICR1 = 4999;	
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	93 e1       	ldi	r25, 0x13	; 19
 158:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 15c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	  //ex: of bits being set
	  //TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
	  //TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);

	  //OC1A AND OC1B as outputs for PWM
	  DDRB |= (1<<PB1)|(1<<PB2);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	86 60       	ori	r24, 0x06	; 6
 164:	84 b9       	out	0x04, r24	; 4

	  TCCR1A = (1<<COM1A1)|(1<<COM1B1);
 166:	80 ea       	ldi	r24, 0xA0	; 160
 168:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	  TC1_FAST_PWM_S_TOP();
 16c:	0e 94 8d 00 	call	0x11a	; 0x11a <TC1_FAST_PWM_S_TOP>
	  TC1_PRESCALING_64();
 170:	0e 94 9e 00 	call	0x13c	; 0x13c <TC1_PRESCALING_64>
 174:	08 95       	ret

00000176 <getServoposition>:
}

int getServoposition(int val){
	int servo = 0;
	servo = (int) ((((float)val)/180.0)*260.0)+245.0;
	return servo;
 176:	bc 01       	movw	r22, r24
 178:	99 0f       	add	r25, r25
 17a:	88 0b       	sbc	r24, r24
 17c:	99 0b       	sbc	r25, r25
 17e:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatsisf>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	44 e3       	ldi	r20, 0x34	; 52
 188:	53 e4       	ldi	r21, 0x43	; 67
 18a:	0e 94 1d 03 	call	0x63a	; 0x63a <__divsf3>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	42 e8       	ldi	r20, 0x82	; 130
 194:	53 e4       	ldi	r21, 0x43	; 67
 196:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3>
 19a:	0e 94 8f 03 	call	0x71e	; 0x71e <__fixsfsi>
 19e:	07 2e       	mov	r0, r23
 1a0:	00 0c       	add	r0, r0
 1a2:	88 0b       	sbc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatsisf>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	45 e7       	ldi	r20, 0x75	; 117
 1b0:	53 e4       	ldi	r21, 0x43	; 67
 1b2:	0e 94 b1 02 	call	0x562	; 0x562 <__addsf3>
 1b6:	0e 94 8f 03 	call	0x71e	; 0x71e <__fixsfsi>
}
 1ba:	cb 01       	movw	r24, r22
 1bc:	08 95       	ret

000001be <resetBuff>:

void resetBuff(unsigned char *buff){
 1be:	fc 01       	movw	r30, r24
 1c0:	06 96       	adiw	r24, 0x06	; 6
	for(int i = 0; i < 6; ++i)
		buff[i] = 0;
 1c2:	11 92       	st	Z+, r1
	servo = (int) ((((float)val)/180.0)*260.0)+245.0;
	return servo;
}

void resetBuff(unsigned char *buff){
	for(int i = 0; i < 6; ++i)
 1c4:	e8 17       	cp	r30, r24
 1c6:	f9 07       	cpc	r31, r25
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <resetBuff+0x4>
		buff[i] = 0;
}
 1ca:	08 95       	ret

000001cc <setLedPorts>:

void setLedPorts(){
	DDRB |= (1<<PB4)|(1<<PB5);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	80 63       	ori	r24, 0x30	; 48
 1d0:	84 b9       	out	0x04, r24	; 4
 1d2:	2a e0       	ldi	r18, 0x0A	; 10
 1d4:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 10; ++i ){
		PORTB ^= (1<<PB4)|(1<<PB5);
 1d6:	90 e3       	ldi	r25, 0x30	; 48
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	89 27       	eor	r24, r25
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	31 09       	sbc	r19, r1
		buff[i] = 0;
}

void setLedPorts(){
	DDRB |= (1<<PB4)|(1<<PB5);
	for(int i = 0; i < 10; ++i ){
 1e2:	d1 f7       	brne	.-12     	; 0x1d8 <setLedPorts+0xc>
		PORTB ^= (1<<PB4)|(1<<PB5);
	}

	PORTB &= ~(1<<PB4)|~(1<<PB5); 
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	08 95       	ret

000001ea <main>:
int getInt(unsigned char *position);

int main(void)
{	
    //initate Timer0 
	initateTimer1();	
 1ea:	0e 94 aa 00 	call	0x154	; 0x154 <initateTimer1>
	//intial value 		
	OCR1A = SERV_MIN;
 1ee:	85 ef       	ldi	r24, 0xF5	; 245
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = SERV_MIN;	
 1fa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1fe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	//set ports used to output high or low
	setLedPorts();
 202:	0e 94 e6 00 	call	0x1cc	; 0x1cc <setLedPorts>

	//initate UART0		
	usart0_init_();				
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <usart0_init_>

	//enable RCX interrupt
	recInterrupt();				
 20a:	e1 ec       	ldi	r30, 0xC1	; 193
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	80 83       	st	Z, r24
	//enable global interrupts
	sei();						
 214:	78 94       	sei
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x2c>

00000218 <changeLedState>:

	PORTB &= ~(1<<PB4)|~(1<<PB5); 
}
void changeLedState(int servoNum){

	switch(servoNum){
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	91 05       	cpc	r25, r1
 21c:	69 f0       	breq	.+26     	; 0x238 <changeLedState+0x20>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 05       	cpc	r25, r1
 222:	91 f0       	breq	.+36     	; 0x248 <changeLedState+0x30>
 224:	89 2b       	or	r24, r25
 226:	d9 f4       	brne	.+54     	; 0x25e <changeLedState+0x46>
		case 0: 
			if(on[servoNum])
 228:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <on>
 22c:	88 23       	and	r24, r24
 22e:	11 f0       	breq	.+4      	; 0x234 <changeLedState+0x1c>
				PORTB |= (1<<PB4);
 230:	2c 9a       	sbi	0x05, 4	; 5
 232:	08 95       	ret
			else 
				PORTB &= ~(1<<PB4); 
 234:	2c 98       	cbi	0x05, 4	; 5
 236:	08 95       	ret
		break;

		case 1: 
			if(on[servoNum])
 238:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <on+0x1>
 23c:	88 23       	and	r24, r24
 23e:	11 f0       	breq	.+4      	; 0x244 <changeLedState+0x2c>
				PORTB |= (1<<PB5);
 240:	2d 9a       	sbi	0x05, 5	; 5
 242:	08 95       	ret
			else
				PORTB &= ~(1<<PB5);
 244:	2d 98       	cbi	0x05, 5	; 5
 246:	08 95       	ret
		break;

		case 2:	
			if(on[servoNum])
 248:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <on+0x2>
 24c:	88 23       	and	r24, r24
 24e:	21 f0       	breq	.+8      	; 0x258 <changeLedState+0x40>
				PORTB |= (1<<PB4)|(1<<PB5);
 250:	85 b1       	in	r24, 0x05	; 5
 252:	80 63       	ori	r24, 0x30	; 48
 254:	85 b9       	out	0x05, r24	; 5
 256:	08 95       	ret
			else
				PORTB &= ~((1<<PB4)|(1<<PB5));  
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	8f 7c       	andi	r24, 0xCF	; 207
 25c:	85 b9       	out	0x05, r24	; 5
 25e:	08 95       	ret

00000260 <getInt>:
		default: break; 
	}
}
int getInt(unsigned char *position)
{
 260:	fc 01       	movw	r30, r24
	int sum = 0;
	sum =  (position[0]-0x30)*100;
 262:	40 81       	ld	r20, Z
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	40 53       	subi	r20, 0x30	; 48
 268:	51 09       	sbc	r21, r1
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	84 9f       	mul	r24, r20
 26e:	b0 01       	movw	r22, r0
 270:	85 9f       	mul	r24, r21
 272:	70 0d       	add	r23, r0
 274:	11 24       	eor	r1, r1
	sum += (position[1]-0x31)*10;
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	29 2f       	mov	r18, r25
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	21 53       	subi	r18, 0x31	; 49
 27e:	31 09       	sbc	r19, r1
 280:	c9 01       	movw	r24, r18
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	28 0f       	add	r18, r24
 294:	39 1f       	adc	r19, r25
 296:	c9 01       	movw	r24, r18
 298:	86 0f       	add	r24, r22
 29a:	97 1f       	adc	r25, r23
	sum += (position[2]-0x30);
	return sum;
 29c:	42 81       	ldd	r20, Z+2	; 0x02
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	40 53       	subi	r20, 0x30	; 48
 2a2:	51 09       	sbc	r21, r1
}
 2a4:	84 0f       	add	r24, r20
 2a6:	95 1f       	adc	r25, r21
 2a8:	08 95       	ret

000002aa <__vector_18>:
	return 0;
}

 //read input 
 ISR(USART_RX_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	cf 93       	push	r28
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	unsigned char receivedChar;
	receivedChar = UDR0;							// Read data from the RX buffer
 2ce:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	putChar_(receivedChar);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 6e 00 	call	0xdc	; 0xdc <putChar_>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	9f e1       	ldi	r25, 0x1F	; 31
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <__vector_18+0x32>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <__vector_18+0x38>
 2e2:	00 00       	nop
	_delay_ms(2);

	if(count == 0){
 2e4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 2e8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 2ec:	89 2b       	or	r24, r25
 2ee:	71 f5       	brne	.+92     	; 0x34c <__vector_18+0xa2>
		unsigned char temp = receivedChar - 0x30;
		switch(temp){
 2f0:	c0 53       	subi	r28, 0x30	; 48
 2f2:	c2 30       	cpi	r28, 0x02	; 2
 2f4:	89 f0       	breq	.+34     	; 0x318 <__vector_18+0x6e>
 2f6:	c3 30       	cpi	r28, 0x03	; 3
 2f8:	e1 f0       	breq	.+56     	; 0x332 <__vector_18+0x88>
 2fa:	c1 30       	cpi	r28, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_18+0x56>
 2fe:	1e c1       	rjmp	.+572    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			case 1:servo = 0;++count;break;
 300:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <servo>
 304:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 308:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <count+0x1>
 312:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <count>
 316:	12 c1       	rjmp	.+548    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			case 2:servo = 1;++count;break;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <servo>
 31e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 322:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <count+0x1>
 32c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <count>
 330:	05 c1       	rjmp	.+522    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			case 3:servo = 2;++count;break;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <servo>
 338:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 33c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <count+0x1>
 346:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <count>
 34a:	f8 c0       	rjmp	.+496    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			default:break;printm("\r\nPlease enter a valid servo");break;
		}
		//printm(":Servo  ");
	}
	else if(count == 1){
 34c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 350:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <__vector_18+0xb0>
 358:	52 c0       	rjmp	.+164    	; 0x3fe <__vector_18+0x154>
		unsigned char temp = receivedChar - 0x30;
		if(temp == 0){
 35a:	c0 33       	cpi	r28, 0x30	; 48
 35c:	11 f5       	brne	.+68     	; 0x3a2 <__vector_18+0xf8>
			switch(servo){
 35e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	59 f0       	breq	.+22     	; 0x37c <__vector_18+0xd2>
 366:	18 f0       	brcs	.+6      	; 0x36e <__vector_18+0xc4>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	79 f0       	breq	.+30     	; 0x38a <__vector_18+0xe0>
 36c:	15 c0       	rjmp	.+42     	; 0x398 <__vector_18+0xee>
				case 0:	on[servo] = 0;changeLedState(servo);break;
 36e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <on>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 37a:	37 c0       	rjmp	.+110    	; 0x3ea <__vector_18+0x140>
				case 1: on[servo] = 0;changeLedState(servo);break;
 37c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <on+0x1>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 388:	30 c0       	rjmp	.+96     	; 0x3ea <__vector_18+0x140>
				case 2: on[servo] = 0;changeLedState(servo);break;
 38a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <on+0x2>
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 396:	29 c0       	rjmp	.+82     	; 0x3ea <__vector_18+0x140>
				default: printm("NO CHANGE");break;
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
 3a0:	24 c0       	rjmp	.+72     	; 0x3ea <__vector_18+0x140>
			}
		}
		else{
				switch(servo){
 3a2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <servo>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__vector_18+0x118>
 3aa:	18 f0       	brcs	.+6      	; 0x3b2 <__vector_18+0x108>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	89 f0       	breq	.+34     	; 0x3d2 <__vector_18+0x128>
 3b0:	18 c0       	rjmp	.+48     	; 0x3e2 <__vector_18+0x138>
				case 0:	on[servo] = 1;changeLedState(servo);break;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <on>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <__vector_18+0x140>
				case 1: on[servo] = 1;changeLedState(servo);break;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <on+0x1>
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <__vector_18+0x140>
				case 2: on[servo] = 1;changeLedState(servo);break;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <on+0x2>
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 0c 01 	call	0x218	; 0x218 <changeLedState>
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <__vector_18+0x140>
				default: printm("NO CHANGE");break;
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
			}
		}
		++count;
 3ea:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 3ee:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <count+0x1>
 3f8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <count>
 3fc:	9f c0       	rjmp	.+318    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	}
	else if(count == 2){
 3fe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <count>
 402:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <count+0x1>
 406:	02 97       	sbiw	r24, 0x02	; 2
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	98 c0       	rjmp	.+304    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	
		if(digit >= 3){
 40c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <digit>
 410:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <digit+0x1>
 414:	03 97       	sbiw	r24, 0x03	; 3
 416:	0c f4       	brge	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	81 c0       	rjmp	.+258    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
			
			printm ("Value Read: ");
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
			printm (position);
 422:	80 e2       	ldi	r24, 0x20	; 32
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>

			int pwmVal;
			pwmVal = getServoposition((getInt(position)));
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 30 01 	call	0x260	; 0x260 <getInt>
 432:	0e 94 bb 00 	call	0x176	; 0x176 <getServoposition>
 436:	9c 01       	movw	r18, r24

			switch(servo){
 438:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <servo>
 43c:	91 30       	cpi	r25, 0x01	; 1
 43e:	f1 f0       	breq	.+60     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 440:	18 f0       	brcs	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	92 30       	cpi	r25, 0x02	; 2
 444:	a9 f1       	breq	.+106    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 446:	59 c0       	rjmp	.+178    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				case 0:{
					if(pwmVal < SERV_MIN)
 448:	25 3f       	cpi	r18, 0xF5	; 245
 44a:	31 05       	cpc	r19, r1
 44c:	3c f4       	brge	.+14     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
						OCR1A = SERV_MIN;
 44e:	85 ef       	ldi	r24, 0xF5	; 245
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 456:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 45a:	4f c0       	rjmp	.+158    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					else if(pwmVal > SERV_MAX)
 45c:	2a 3f       	cpi	r18, 0xFA	; 250
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	39 07       	cpc	r19, r25
 462:	3c f0       	brlt	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
						OCR1A = SERV_MAX;
 464:	89 ef       	ldi	r24, 0xF9	; 249
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 46c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 470:	44 c0       	rjmp	.+136    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					else
						OCR1A = pwmVal;
 472:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 476:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 47a:	3f c0       	rjmp	.+126    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					break;
				}
				case 1:{
					if(pwmVal < SERV_MIN)
 47c:	25 3f       	cpi	r18, 0xF5	; 245
 47e:	31 05       	cpc	r19, r1
 480:	3c f4       	brge	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
						OCR1B = SERV_MIN;
 482:	85 ef       	ldi	r24, 0xF5	; 245
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 48a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 48e:	35 c0       	rjmp	.+106    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					else if(pwmVal > SERV_MAX)
 490:	2a 3f       	cpi	r18, 0xFA	; 250
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	38 07       	cpc	r19, r24
 496:	3c f0       	brlt	.+14     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
						OCR1B = SERV_MAX;
 498:	89 ef       	ldi	r24, 0xF9	; 249
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4a4:	2a c0       	rjmp	.+84     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					else
						OCR1B = pwmVal;
 4a6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4aa:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4ae:	25 c0       	rjmp	.+74     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					break;
				}

				//currently only have 2 servos
				case 2: {
					if(pwmVal < SERV_MIN){
 4b0:	25 3f       	cpi	r18, 0xF5	; 245
 4b2:	31 05       	cpc	r19, r1
 4b4:	5c f4       	brge	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
						OCR1B = SERV_MIN;
 4b6:	85 ef       	ldi	r24, 0xF5	; 245
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
						OCR1A = SERV_MIN;
 4c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4ca:	17 c0       	rjmp	.+46     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					}
					else if(pwmVal > SERV_MAX){
 4cc:	2a 3f       	cpi	r18, 0xFA	; 250
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	39 07       	cpc	r19, r25
 4d2:	5c f0       	brlt	.+22     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
						OCR1B = SERV_MAX;
 4d4:	89 ef       	ldi	r24, 0xF9	; 249
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4dc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
						OCR1A = SERV_MAX;
 4e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
					}
					else{
						OCR1B = pwmVal;
 4ea:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4ee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
						OCR1A = pwmVal;
 4f2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4f6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
					break;
				}
			}
			
			
			printm("\r\n");
 4fa:	8d e1       	ldi	r24, 0x1D	; 29
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 7e 00 	call	0xfc	; 0xfc <printm>
			resetBuff(position);
 502:	80 e2       	ldi	r24, 0x20	; 32
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 df 00 	call	0x1be	; 0x1be <resetBuff>
			count = 0;
 50a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <count+0x1>
 50e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <count>
			digit = 0;
 512:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <digit+0x1>
 516:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <digit>
 51a:	10 c0       	rjmp	.+32     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	 	}
	 	else {
			position[digit] = receivedChar ;
 51c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <digit>
 520:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <digit+0x1>
 524:	e0 5e       	subi	r30, 0xE0	; 224
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	c0 83       	st	Z, r28
	 		++digit;
 52a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <digit>
 52e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <digit+0x1>
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <digit+0x1>
 538:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <digit>
		}
	}

}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	cf 91       	pop	r28
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__subsf3>:
 560:	50 58       	subi	r21, 0x80	; 128

00000562 <__addsf3>:
 562:	bb 27       	eor	r27, r27
 564:	aa 27       	eor	r26, r26
 566:	0e 94 c8 02 	call	0x590	; 0x590 <__addsf3x>
 56a:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_round>
 56e:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscA>
 572:	38 f0       	brcs	.+14     	; 0x582 <__addsf3+0x20>
 574:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscB>
 578:	20 f0       	brcs	.+8      	; 0x582 <__addsf3+0x20>
 57a:	39 f4       	brne	.+14     	; 0x58a <__addsf3+0x28>
 57c:	9f 3f       	cpi	r25, 0xFF	; 255
 57e:	19 f4       	brne	.+6      	; 0x586 <__addsf3+0x24>
 580:	26 f4       	brtc	.+8      	; 0x58a <__addsf3+0x28>
 582:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_nan>
 586:	0e f4       	brtc	.+2      	; 0x58a <__addsf3+0x28>
 588:	e0 95       	com	r30
 58a:	e7 fb       	bst	r30, 7
 58c:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>

00000590 <__addsf3x>:
 590:	e9 2f       	mov	r30, r25
 592:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_split3>
 596:	58 f3       	brcs	.-42     	; 0x56e <__addsf3+0xc>
 598:	ba 17       	cp	r27, r26
 59a:	62 07       	cpc	r22, r18
 59c:	73 07       	cpc	r23, r19
 59e:	84 07       	cpc	r24, r20
 5a0:	95 07       	cpc	r25, r21
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__addsf3x+0x1c>
 5a4:	79 f4       	brne	.+30     	; 0x5c4 <__addsf3x+0x34>
 5a6:	a6 f5       	brtc	.+104    	; 0x610 <__addsf3x+0x80>
 5a8:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_zero>
 5ac:	0e f4       	brtc	.+2      	; 0x5b0 <__addsf3x+0x20>
 5ae:	e0 95       	com	r30
 5b0:	0b 2e       	mov	r0, r27
 5b2:	ba 2f       	mov	r27, r26
 5b4:	a0 2d       	mov	r26, r0
 5b6:	0b 01       	movw	r0, r22
 5b8:	b9 01       	movw	r22, r18
 5ba:	90 01       	movw	r18, r0
 5bc:	0c 01       	movw	r0, r24
 5be:	ca 01       	movw	r24, r20
 5c0:	a0 01       	movw	r20, r0
 5c2:	11 24       	eor	r1, r1
 5c4:	ff 27       	eor	r31, r31
 5c6:	59 1b       	sub	r21, r25
 5c8:	99 f0       	breq	.+38     	; 0x5f0 <__addsf3x+0x60>
 5ca:	59 3f       	cpi	r21, 0xF9	; 249
 5cc:	50 f4       	brcc	.+20     	; 0x5e2 <__addsf3x+0x52>
 5ce:	50 3e       	cpi	r21, 0xE0	; 224
 5d0:	68 f1       	brcs	.+90     	; 0x62c <__addsf3x+0x9c>
 5d2:	1a 16       	cp	r1, r26
 5d4:	f0 40       	sbci	r31, 0x00	; 0
 5d6:	a2 2f       	mov	r26, r18
 5d8:	23 2f       	mov	r18, r19
 5da:	34 2f       	mov	r19, r20
 5dc:	44 27       	eor	r20, r20
 5de:	58 5f       	subi	r21, 0xF8	; 248
 5e0:	f3 cf       	rjmp	.-26     	; 0x5c8 <__addsf3x+0x38>
 5e2:	46 95       	lsr	r20
 5e4:	37 95       	ror	r19
 5e6:	27 95       	ror	r18
 5e8:	a7 95       	ror	r26
 5ea:	f0 40       	sbci	r31, 0x00	; 0
 5ec:	53 95       	inc	r21
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__addsf3x+0x52>
 5f0:	7e f4       	brtc	.+30     	; 0x610 <__addsf3x+0x80>
 5f2:	1f 16       	cp	r1, r31
 5f4:	ba 0b       	sbc	r27, r26
 5f6:	62 0b       	sbc	r22, r18
 5f8:	73 0b       	sbc	r23, r19
 5fa:	84 0b       	sbc	r24, r20
 5fc:	ba f0       	brmi	.+46     	; 0x62c <__addsf3x+0x9c>
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	a1 f0       	breq	.+40     	; 0x62a <__addsf3x+0x9a>
 602:	ff 0f       	add	r31, r31
 604:	bb 1f       	adc	r27, r27
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	c2 f7       	brpl	.-16     	; 0x5fe <__addsf3x+0x6e>
 60e:	0e c0       	rjmp	.+28     	; 0x62c <__addsf3x+0x9c>
 610:	ba 0f       	add	r27, r26
 612:	62 1f       	adc	r22, r18
 614:	73 1f       	adc	r23, r19
 616:	84 1f       	adc	r24, r20
 618:	48 f4       	brcc	.+18     	; 0x62c <__addsf3x+0x9c>
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b7 95       	ror	r27
 622:	f7 95       	ror	r31
 624:	9e 3f       	cpi	r25, 0xFE	; 254
 626:	08 f0       	brcs	.+2      	; 0x62a <__addsf3x+0x9a>
 628:	b0 cf       	rjmp	.-160    	; 0x58a <__addsf3+0x28>
 62a:	93 95       	inc	r25
 62c:	88 0f       	add	r24, r24
 62e:	08 f0       	brcs	.+2      	; 0x632 <__addsf3x+0xa2>
 630:	99 27       	eor	r25, r25
 632:	ee 0f       	add	r30, r30
 634:	97 95       	ror	r25
 636:	87 95       	ror	r24
 638:	08 95       	ret

0000063a <__divsf3>:
 63a:	0e 94 31 03 	call	0x662	; 0x662 <__divsf3x>
 63e:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_round>
 642:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscB>
 646:	58 f0       	brcs	.+22     	; 0x65e <__divsf3+0x24>
 648:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscA>
 64c:	40 f0       	brcs	.+16     	; 0x65e <__divsf3+0x24>
 64e:	29 f4       	brne	.+10     	; 0x65a <__divsf3+0x20>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	29 f0       	breq	.+10     	; 0x65e <__divsf3+0x24>
 654:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 658:	51 11       	cpse	r21, r1
 65a:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_szero>
 65e:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_nan>

00000662 <__divsf3x>:
 662:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_split3>
 666:	68 f3       	brcs	.-38     	; 0x642 <__divsf3+0x8>

00000668 <__divsf3_pse>:
 668:	99 23       	and	r25, r25
 66a:	b1 f3       	breq	.-20     	; 0x658 <__divsf3+0x1e>
 66c:	55 23       	and	r21, r21
 66e:	91 f3       	breq	.-28     	; 0x654 <__divsf3+0x1a>
 670:	95 1b       	sub	r25, r21
 672:	55 0b       	sbc	r21, r21
 674:	bb 27       	eor	r27, r27
 676:	aa 27       	eor	r26, r26
 678:	62 17       	cp	r22, r18
 67a:	73 07       	cpc	r23, r19
 67c:	84 07       	cpc	r24, r20
 67e:	38 f0       	brcs	.+14     	; 0x68e <__divsf3_pse+0x26>
 680:	9f 5f       	subi	r25, 0xFF	; 255
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	44 1f       	adc	r20, r20
 68a:	aa 1f       	adc	r26, r26
 68c:	a9 f3       	breq	.-22     	; 0x678 <__divsf3_pse+0x10>
 68e:	35 d0       	rcall	.+106    	; 0x6fa <__divsf3_pse+0x92>
 690:	0e 2e       	mov	r0, r30
 692:	3a f0       	brmi	.+14     	; 0x6a2 <__divsf3_pse+0x3a>
 694:	e0 e8       	ldi	r30, 0x80	; 128
 696:	32 d0       	rcall	.+100    	; 0x6fc <__divsf3_pse+0x94>
 698:	91 50       	subi	r25, 0x01	; 1
 69a:	50 40       	sbci	r21, 0x00	; 0
 69c:	e6 95       	lsr	r30
 69e:	00 1c       	adc	r0, r0
 6a0:	ca f7       	brpl	.-14     	; 0x694 <__divsf3_pse+0x2c>
 6a2:	2b d0       	rcall	.+86     	; 0x6fa <__divsf3_pse+0x92>
 6a4:	fe 2f       	mov	r31, r30
 6a6:	29 d0       	rcall	.+82     	; 0x6fa <__divsf3_pse+0x92>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	bb 1f       	adc	r27, r27
 6b0:	26 17       	cp	r18, r22
 6b2:	37 07       	cpc	r19, r23
 6b4:	48 07       	cpc	r20, r24
 6b6:	ab 07       	cpc	r26, r27
 6b8:	b0 e8       	ldi	r27, 0x80	; 128
 6ba:	09 f0       	breq	.+2      	; 0x6be <__divsf3_pse+0x56>
 6bc:	bb 0b       	sbc	r27, r27
 6be:	80 2d       	mov	r24, r0
 6c0:	bf 01       	movw	r22, r30
 6c2:	ff 27       	eor	r31, r31
 6c4:	93 58       	subi	r25, 0x83	; 131
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	3a f0       	brmi	.+14     	; 0x6d8 <__divsf3_pse+0x70>
 6ca:	9e 3f       	cpi	r25, 0xFE	; 254
 6cc:	51 05       	cpc	r21, r1
 6ce:	78 f0       	brcs	.+30     	; 0x6ee <__divsf3_pse+0x86>
 6d0:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 6d4:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_szero>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	e4 f3       	brlt	.-8      	; 0x6d4 <__divsf3_pse+0x6c>
 6dc:	98 3e       	cpi	r25, 0xE8	; 232
 6de:	d4 f3       	brlt	.-12     	; 0x6d4 <__divsf3_pse+0x6c>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	f7 95       	ror	r31
 6ea:	9f 5f       	subi	r25, 0xFF	; 255
 6ec:	c9 f7       	brne	.-14     	; 0x6e0 <__divsf3_pse+0x78>
 6ee:	88 0f       	add	r24, r24
 6f0:	91 1d       	adc	r25, r1
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret
 6fa:	e1 e0       	ldi	r30, 0x01	; 1
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	bb 1f       	adc	r27, r27
 704:	62 17       	cp	r22, r18
 706:	73 07       	cpc	r23, r19
 708:	84 07       	cpc	r24, r20
 70a:	ba 07       	cpc	r27, r26
 70c:	20 f0       	brcs	.+8      	; 0x716 <__divsf3_pse+0xae>
 70e:	62 1b       	sub	r22, r18
 710:	73 0b       	sbc	r23, r19
 712:	84 0b       	sbc	r24, r20
 714:	ba 0b       	sbc	r27, r26
 716:	ee 1f       	adc	r30, r30
 718:	88 f7       	brcc	.-30     	; 0x6fc <__divsf3_pse+0x94>
 71a:	e0 95       	com	r30
 71c:	08 95       	ret

0000071e <__fixsfsi>:
 71e:	0e 94 96 03 	call	0x72c	; 0x72c <__fixunssfsi>
 722:	68 94       	set
 724:	b1 11       	cpse	r27, r1
 726:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_szero>
 72a:	08 95       	ret

0000072c <__fixunssfsi>:
 72c:	0e 94 32 04 	call	0x864	; 0x864 <__fp_splitA>
 730:	88 f0       	brcs	.+34     	; 0x754 <__fixunssfsi+0x28>
 732:	9f 57       	subi	r25, 0x7F	; 127
 734:	98 f0       	brcs	.+38     	; 0x75c <__fixunssfsi+0x30>
 736:	b9 2f       	mov	r27, r25
 738:	99 27       	eor	r25, r25
 73a:	b7 51       	subi	r27, 0x17	; 23
 73c:	b0 f0       	brcs	.+44     	; 0x76a <__fixunssfsi+0x3e>
 73e:	e1 f0       	breq	.+56     	; 0x778 <__fixunssfsi+0x4c>
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	1a f0       	brmi	.+6      	; 0x750 <__fixunssfsi+0x24>
 74a:	ba 95       	dec	r27
 74c:	c9 f7       	brne	.-14     	; 0x740 <__fixunssfsi+0x14>
 74e:	14 c0       	rjmp	.+40     	; 0x778 <__fixunssfsi+0x4c>
 750:	b1 30       	cpi	r27, 0x01	; 1
 752:	91 f0       	breq	.+36     	; 0x778 <__fixunssfsi+0x4c>
 754:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_zero>
 758:	b1 e0       	ldi	r27, 0x01	; 1
 75a:	08 95       	ret
 75c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_zero>
 760:	67 2f       	mov	r22, r23
 762:	78 2f       	mov	r23, r24
 764:	88 27       	eor	r24, r24
 766:	b8 5f       	subi	r27, 0xF8	; 248
 768:	39 f0       	breq	.+14     	; 0x778 <__fixunssfsi+0x4c>
 76a:	b9 3f       	cpi	r27, 0xF9	; 249
 76c:	cc f3       	brlt	.-14     	; 0x760 <__fixunssfsi+0x34>
 76e:	86 95       	lsr	r24
 770:	77 95       	ror	r23
 772:	67 95       	ror	r22
 774:	b3 95       	inc	r27
 776:	d9 f7       	brne	.-10     	; 0x76e <__fixunssfsi+0x42>
 778:	3e f4       	brtc	.+14     	; 0x788 <__fixunssfsi+0x5c>
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	08 95       	ret

0000078a <__floatunsisf>:
 78a:	e8 94       	clt
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <__floatsisf+0x12>

0000078e <__floatsisf>:
 78e:	97 fb       	bst	r25, 7
 790:	3e f4       	brtc	.+14     	; 0x7a0 <__floatsisf+0x12>
 792:	90 95       	com	r25
 794:	80 95       	com	r24
 796:	70 95       	com	r23
 798:	61 95       	neg	r22
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	99 23       	and	r25, r25
 7a2:	a9 f0       	breq	.+42     	; 0x7ce <__floatsisf+0x40>
 7a4:	f9 2f       	mov	r31, r25
 7a6:	96 e9       	ldi	r25, 0x96	; 150
 7a8:	bb 27       	eor	r27, r27
 7aa:	93 95       	inc	r25
 7ac:	f6 95       	lsr	r31
 7ae:	87 95       	ror	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	f1 11       	cpse	r31, r1
 7b8:	f8 cf       	rjmp	.-16     	; 0x7aa <__floatsisf+0x1c>
 7ba:	fa f4       	brpl	.+62     	; 0x7fa <__floatsisf+0x6c>
 7bc:	bb 0f       	add	r27, r27
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__floatsisf+0x36>
 7c0:	60 ff       	sbrs	r22, 0
 7c2:	1b c0       	rjmp	.+54     	; 0x7fa <__floatsisf+0x6c>
 7c4:	6f 5f       	subi	r22, 0xFF	; 255
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	16 c0       	rjmp	.+44     	; 0x7fa <__floatsisf+0x6c>
 7ce:	88 23       	and	r24, r24
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <__floatsisf+0x48>
 7d2:	96 e9       	ldi	r25, 0x96	; 150
 7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <__floatsisf+0x6a>
 7d6:	77 23       	and	r23, r23
 7d8:	21 f0       	breq	.+8      	; 0x7e2 <__floatsisf+0x54>
 7da:	9e e8       	ldi	r25, 0x8E	; 142
 7dc:	87 2f       	mov	r24, r23
 7de:	76 2f       	mov	r23, r22
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <__floatsisf+0x5e>
 7e2:	66 23       	and	r22, r22
 7e4:	71 f0       	breq	.+28     	; 0x802 <__floatsisf+0x74>
 7e6:	96 e8       	ldi	r25, 0x86	; 134
 7e8:	86 2f       	mov	r24, r22
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	2a f0       	brmi	.+10     	; 0x7fa <__floatsisf+0x6c>
 7f0:	9a 95       	dec	r25
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	da f7       	brpl	.-10     	; 0x7f0 <__floatsisf+0x62>
 7fa:	88 0f       	add	r24, r24
 7fc:	96 95       	lsr	r25
 7fe:	87 95       	ror	r24
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__fp_inf>:
 804:	97 f9       	bld	r25, 7
 806:	9f 67       	ori	r25, 0x7F	; 127
 808:	80 e8       	ldi	r24, 0x80	; 128
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	08 95       	ret

00000810 <__fp_nan>:
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	80 ec       	ldi	r24, 0xC0	; 192
 814:	08 95       	ret

00000816 <__fp_pscA>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	09 06       	cpc	r0, r25
 822:	08 95       	ret

00000824 <__fp_pscB>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	12 16       	cp	r1, r18
 82a:	13 06       	cpc	r1, r19
 82c:	14 06       	cpc	r1, r20
 82e:	05 06       	cpc	r0, r21
 830:	08 95       	ret

00000832 <__fp_round>:
 832:	09 2e       	mov	r0, r25
 834:	03 94       	inc	r0
 836:	00 0c       	add	r0, r0
 838:	11 f4       	brne	.+4      	; 0x83e <__fp_round+0xc>
 83a:	88 23       	and	r24, r24
 83c:	52 f0       	brmi	.+20     	; 0x852 <__fp_round+0x20>
 83e:	bb 0f       	add	r27, r27
 840:	40 f4       	brcc	.+16     	; 0x852 <__fp_round+0x20>
 842:	bf 2b       	or	r27, r31
 844:	11 f4       	brne	.+4      	; 0x84a <__fp_round+0x18>
 846:	60 ff       	sbrs	r22, 0
 848:	04 c0       	rjmp	.+8      	; 0x852 <__fp_round+0x20>
 84a:	6f 5f       	subi	r22, 0xFF	; 255
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	08 95       	ret

00000854 <__fp_split3>:
 854:	57 fd       	sbrc	r21, 7
 856:	90 58       	subi	r25, 0x80	; 128
 858:	44 0f       	add	r20, r20
 85a:	55 1f       	adc	r21, r21
 85c:	59 f0       	breq	.+22     	; 0x874 <__fp_splitA+0x10>
 85e:	5f 3f       	cpi	r21, 0xFF	; 255
 860:	71 f0       	breq	.+28     	; 0x87e <__fp_splitA+0x1a>
 862:	47 95       	ror	r20

00000864 <__fp_splitA>:
 864:	88 0f       	add	r24, r24
 866:	97 fb       	bst	r25, 7
 868:	99 1f       	adc	r25, r25
 86a:	61 f0       	breq	.+24     	; 0x884 <__fp_splitA+0x20>
 86c:	9f 3f       	cpi	r25, 0xFF	; 255
 86e:	79 f0       	breq	.+30     	; 0x88e <__fp_splitA+0x2a>
 870:	87 95       	ror	r24
 872:	08 95       	ret
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	55 1f       	adc	r21, r21
 87c:	f2 cf       	rjmp	.-28     	; 0x862 <__fp_split3+0xe>
 87e:	46 95       	lsr	r20
 880:	f1 df       	rcall	.-30     	; 0x864 <__fp_splitA>
 882:	08 c0       	rjmp	.+16     	; 0x894 <__fp_splitA+0x30>
 884:	16 16       	cp	r1, r22
 886:	17 06       	cpc	r1, r23
 888:	18 06       	cpc	r1, r24
 88a:	99 1f       	adc	r25, r25
 88c:	f1 cf       	rjmp	.-30     	; 0x870 <__fp_splitA+0xc>
 88e:	86 95       	lsr	r24
 890:	71 05       	cpc	r23, r1
 892:	61 05       	cpc	r22, r1
 894:	08 94       	sec
 896:	08 95       	ret

00000898 <__fp_zero>:
 898:	e8 94       	clt

0000089a <__fp_szero>:
 89a:	bb 27       	eor	r27, r27
 89c:	66 27       	eor	r22, r22
 89e:	77 27       	eor	r23, r23
 8a0:	cb 01       	movw	r24, r22
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <__mulsf3>:
 8a6:	0e 94 66 04 	call	0x8cc	; 0x8cc <__mulsf3x>
 8aa:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_round>
 8ae:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscA>
 8b2:	38 f0       	brcs	.+14     	; 0x8c2 <__mulsf3+0x1c>
 8b4:	0e 94 12 04 	call	0x824	; 0x824 <__fp_pscB>
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__mulsf3+0x1c>
 8ba:	95 23       	and	r25, r21
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <__mulsf3+0x1c>
 8be:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 8c2:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_nan>
 8c6:	11 24       	eor	r1, r1
 8c8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_szero>

000008cc <__mulsf3x>:
 8cc:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_split3>
 8d0:	70 f3       	brcs	.-36     	; 0x8ae <__mulsf3+0x8>

000008d2 <__mulsf3_pse>:
 8d2:	95 9f       	mul	r25, r21
 8d4:	c1 f3       	breq	.-16     	; 0x8c6 <__mulsf3+0x20>
 8d6:	95 0f       	add	r25, r21
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	55 1f       	adc	r21, r21
 8dc:	62 9f       	mul	r22, r18
 8de:	f0 01       	movw	r30, r0
 8e0:	72 9f       	mul	r23, r18
 8e2:	bb 27       	eor	r27, r27
 8e4:	f0 0d       	add	r31, r0
 8e6:	b1 1d       	adc	r27, r1
 8e8:	63 9f       	mul	r22, r19
 8ea:	aa 27       	eor	r26, r26
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	aa 1f       	adc	r26, r26
 8f2:	64 9f       	mul	r22, r20
 8f4:	66 27       	eor	r22, r22
 8f6:	b0 0d       	add	r27, r0
 8f8:	a1 1d       	adc	r26, r1
 8fa:	66 1f       	adc	r22, r22
 8fc:	82 9f       	mul	r24, r18
 8fe:	22 27       	eor	r18, r18
 900:	b0 0d       	add	r27, r0
 902:	a1 1d       	adc	r26, r1
 904:	62 1f       	adc	r22, r18
 906:	73 9f       	mul	r23, r19
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	83 9f       	mul	r24, r19
 910:	a0 0d       	add	r26, r0
 912:	61 1d       	adc	r22, r1
 914:	22 1f       	adc	r18, r18
 916:	74 9f       	mul	r23, r20
 918:	33 27       	eor	r19, r19
 91a:	a0 0d       	add	r26, r0
 91c:	61 1d       	adc	r22, r1
 91e:	23 1f       	adc	r18, r19
 920:	84 9f       	mul	r24, r20
 922:	60 0d       	add	r22, r0
 924:	21 1d       	adc	r18, r1
 926:	82 2f       	mov	r24, r18
 928:	76 2f       	mov	r23, r22
 92a:	6a 2f       	mov	r22, r26
 92c:	11 24       	eor	r1, r1
 92e:	9f 57       	subi	r25, 0x7F	; 127
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	9a f0       	brmi	.+38     	; 0x95a <__stack+0x5b>
 934:	f1 f0       	breq	.+60     	; 0x972 <__stack+0x73>
 936:	88 23       	and	r24, r24
 938:	4a f0       	brmi	.+18     	; 0x94c <__stack+0x4d>
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	bb 1f       	adc	r27, r27
 940:	66 1f       	adc	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	91 50       	subi	r25, 0x01	; 1
 948:	50 40       	sbci	r21, 0x00	; 0
 94a:	a9 f7       	brne	.-22     	; 0x936 <__stack+0x37>
 94c:	9e 3f       	cpi	r25, 0xFE	; 254
 94e:	51 05       	cpc	r21, r1
 950:	80 f0       	brcs	.+32     	; 0x972 <__stack+0x73>
 952:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_inf>
 956:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__fp_szero>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	e4 f3       	brlt	.-8      	; 0x956 <__stack+0x57>
 95e:	98 3e       	cpi	r25, 0xE8	; 232
 960:	d4 f3       	brlt	.-12     	; 0x956 <__stack+0x57>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f7 95       	ror	r31
 96c:	e7 95       	ror	r30
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	c1 f7       	brne	.-16     	; 0x962 <__stack+0x63>
 972:	fe 2b       	or	r31, r30
 974:	88 0f       	add	r24, r24
 976:	91 1d       	adc	r25, r1
 978:	96 95       	lsr	r25
 97a:	87 95       	ror	r24
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
