
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092b  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000703  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	//TIMER 0 A&B
	//Fast PWM Mode
	//WITH NO PRESCALING
	//CHECK OCF0A and OCF0B
	//TOP OCR0A[7:0] and TOP OCR0B[7:0]
	TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
  80:	83 ea       	ldi	r24, 0xA3	; 163
  82:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 bd       	out	0x25, r24	; 37
	//TIMER 2 
	//Fast PWM Mode
	//WITH NO PRESCALING
	//TOP 0CR2A[7:0]
	//TIFR2 TO CHECK OCFA
	TCCR2A = _BV(COM2A1)|_BV(WGM21)|_BV(WGM20);
  88:	93 e8       	ldi	r25, 0x83	; 131
  8a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = _BV(CS20);
  8e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//PD.6 is OC0A PD.5 is OC0B
	DDRD = 0x60;
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
	//PB.3 is OC2A
	DDRB = 0x08;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	84 b9       	out	0x04, r24	; 4
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0

//Calculate our OCRxx value based on the passed in duty cycle
//OCRxx = ((256*Duty Cycle)/100-1
char PWM_Desired(unsigned char DC){
	unsigned char temp;
	temp = ((256*DC)/100)-1;
  9e:	c4 e6       	ldi	r28, 0x64	; 100
  a0:	d0 e0       	ldi	r29, 0x00	; 0
			//and after have .5s delay
			OCR0A = val;
			_delay_ms(DELAY);
			OCR0B = val;
			_delay_ms(DELAY);
			OCR2A = val;
  a2:	e3 eb       	ldi	r30, 0xB3	; 179
  a4:	f0 e0       	ldi	r31, 0x00	; 0

//Calculate our OCRxx value based on the passed in duty cycle
//OCRxx = ((256*Duty Cycle)/100-1
char PWM_Desired(unsigned char DC){
	unsigned char temp;
	temp = ((256*DC)/100)-1;
  a6:	c9 01       	movw	r24, r18
  a8:	be 01       	movw	r22, r28
  aa:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	96 0f       	add	r25, r22
		{	
			unsigned char val = PWM_Desired(i);	

			//SET the desired counter based on duty cycle
			//and after have .5s delay
			OCR0A = val;
  b2:	97 bd       	out	0x27, r25	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	4f e9       	ldi	r20, 0x9F	; 159
  b6:	56 e8       	ldi	r21, 0x86	; 134
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	50 40       	sbci	r21, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
			_delay_ms(DELAY);
			OCR0B = val;
  c6:	98 bd       	out	0x28, r25	; 40
  c8:	4f e9       	ldi	r20, 0x9F	; 159
  ca:	56 e8       	ldi	r21, 0x86	; 134
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
			_delay_ms(DELAY);
			OCR2A = val;
  da:	90 83       	st	Z, r25
  dc:	9f e9       	ldi	r25, 0x9F	; 159
  de:	46 e8       	ldi	r20, 0x86	; 134
  e0:	51 e0       	ldi	r21, 0x01	; 1
  e2:	91 50       	subi	r25, 0x01	; 1
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
  ee:	36 5f       	subi	r19, 0xF6	; 246
    {	
		//DUTY CYLCE FROM 10% to 90%
		//OCR0A = BLUE
		//OCR0B = RED
		//OCR2A = GREEN
		for(unsigned char i = 0; i <= 90; i += 10)
  f0:	21 15       	cp	r18, r1
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	38 07       	cpc	r19, r24
  f6:	b9 f6       	brne	.-82     	; 0xa6 <main+0x26>
  f8:	2a e5       	ldi	r18, 0x5A	; 90

//Calculate our OCRxx value based on the passed in duty cycle
//OCRxx = ((256*Duty Cycle)/100-1
char PWM_Desired(unsigned char DC){
	unsigned char temp;
	temp = ((256*DC)/100)-1;
  fa:	c4 e6       	ldi	r28, 0x64	; 100
  fc:	d0 e0       	ldi	r29, 0x00	; 0
			//and after have .5s delay
			OCR0A = val;
			_delay_ms(DELAY);
			OCR0B = val;
			_delay_ms(DELAY);
			OCR2A = val;
  fe:	e3 eb       	ldi	r30, 0xB3	; 179
 100:	f0 e0       	ldi	r31, 0x00	; 0

//Calculate our OCRxx value based on the passed in duty cycle
//OCRxx = ((256*Duty Cycle)/100-1
char PWM_Desired(unsigned char DC){
	unsigned char temp;
	temp = ((256*DC)/100)-1;
 102:	92 2f       	mov	r25, r18
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	86 0f       	add	r24, r22
		for(unsigned char i = 90; i >= 0; i -= 10)
		{
			unsigned char val = PWM_Desired(i);
			//SET the desired counter based on duty cycle
			//and after have .5s delay
			OCR0A = val;
 110:	87 bd       	out	0x27, r24	; 39
 112:	9f e9       	ldi	r25, 0x9F	; 159
 114:	36 e8       	ldi	r19, 0x86	; 134
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	91 50       	subi	r25, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	40 40       	sbci	r20, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x98>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa2>
 122:	00 00       	nop
			_delay_ms(DELAY);
			OCR0B = val;
 124:	88 bd       	out	0x28, r24	; 40
 126:	5f e9       	ldi	r21, 0x9F	; 159
 128:	96 e8       	ldi	r25, 0x86	; 134
 12a:	31 e0       	ldi	r19, 0x01	; 1
 12c:	51 50       	subi	r21, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xac>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb6>
 136:	00 00       	nop
			_delay_ms(DELAY);
			OCR2A = val;
 138:	80 83       	st	Z, r24
 13a:	4f e9       	ldi	r20, 0x9F	; 159
 13c:	56 e8       	ldi	r21, 0x86	; 134
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	41 50       	subi	r20, 0x01	; 1
 142:	50 40       	sbci	r21, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xc0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xca>
 14a:	00 00       	nop
			OCR2A = val;
			_delay_ms(DELAY);
		}	

		//DUTY CYLCE FROM 90% to 10%
		for(unsigned char i = 90; i >= 0; i -= 10)
 14c:	2a 50       	subi	r18, 0x0A	; 10
			_delay_ms(DELAY);
			OCR0B = val;
			_delay_ms(DELAY);
			OCR2A = val;
			_delay_ms(DELAY);
		}
 14e:	d9 cf       	rjmp	.-78     	; 0x102 <main+0x82>

00000150 <__divmodhi4>:
 150:	97 fb       	bst	r25, 7
 152:	07 2e       	mov	r0, r23
 154:	16 f4       	brtc	.+4      	; 0x15a <__divmodhi4+0xa>
 156:	00 94       	com	r0
 158:	07 d0       	rcall	.+14     	; 0x168 <__divmodhi4_neg1>
 15a:	77 fd       	sbrc	r23, 7
 15c:	09 d0       	rcall	.+18     	; 0x170 <__divmodhi4_neg2>
 15e:	0e 94 bc 00 	call	0x178	; 0x178 <__udivmodhi4>
 162:	07 fc       	sbrc	r0, 7
 164:	05 d0       	rcall	.+10     	; 0x170 <__divmodhi4_neg2>
 166:	3e f4       	brtc	.+14     	; 0x176 <__divmodhi4_exit>

00000168 <__divmodhi4_neg1>:
 168:	90 95       	com	r25
 16a:	81 95       	neg	r24
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	08 95       	ret

00000170 <__divmodhi4_neg2>:
 170:	70 95       	com	r23
 172:	61 95       	neg	r22
 174:	7f 4f       	sbci	r23, 0xFF	; 255

00000176 <__divmodhi4_exit>:
 176:	08 95       	ret

00000178 <__udivmodhi4>:
 178:	aa 1b       	sub	r26, r26
 17a:	bb 1b       	sub	r27, r27
 17c:	51 e1       	ldi	r21, 0x11	; 17
 17e:	07 c0       	rjmp	.+14     	; 0x18e <__udivmodhi4_ep>

00000180 <__udivmodhi4_loop>:
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	a6 17       	cp	r26, r22
 186:	b7 07       	cpc	r27, r23
 188:	10 f0       	brcs	.+4      	; 0x18e <__udivmodhi4_ep>
 18a:	a6 1b       	sub	r26, r22
 18c:	b7 0b       	sbc	r27, r23

0000018e <__udivmodhi4_ep>:
 18e:	88 1f       	adc	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	5a 95       	dec	r21
 194:	a9 f7       	brne	.-22     	; 0x180 <__udivmodhi4_loop>
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
