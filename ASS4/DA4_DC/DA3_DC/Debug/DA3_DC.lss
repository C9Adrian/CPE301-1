
DA3_DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b3  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000aa  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initateTimer>:

void initateTimer()
{
	//Set PORTB1 pin as output
	// make OC1A as output.
	DDRB |= (1<<DDB1);	
  80:	21 9a       	sbi	0x04, 1	; 4
	// Output compare mode on OC1A. Fast PWM with top = ICR1.
	// Clear OC1A on Compare match and set at bottom.
	TCCR1A |= (1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	82 68       	ori	r24, 0x82	; 130
  8a:	80 83       	st	Z, r24

	// Start timer with pre-scaler 64
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
  8c:	e1 e8       	ldi	r30, 0x81	; 129
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8b 61       	ori	r24, 0x1B	; 27
  94:	80 83       	st	Z, r24
	
	//TOP =  (F_CPU / (N * F_pwm)) - 1, where N is the prescaler = 64, and F_pwm is the desired 50Hz frequency.
	ICR1 = 4999;  
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	93 e1       	ldi	r25, 0x13	; 19
  9a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  9e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  a2:	08 95       	ret

000000a4 <ADC0init>:
}
void ADC0init()
{
	DDRC	&= ~(0<<DDC0);	// SET PC.0 as an input  
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA	= 0x87;			// Enable ADC and CLK/128
  a8:	87 e8       	ldi	r24, 0x87	; 135
  aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX	= (1<<REFS0);	// VCC reference, ADC0 single ended input
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  b4:	08 95       	ret

000000b6 <update_OC1A>:
}
void update_OC1A(unsigned char DC)
{
	//SET OC1A to create desire Duty Cycle based on the value passed in
	OCR1A = (unsigned short)((DC * 4999.0)/100.0);
  b6:	68 2f       	mov	r22, r24
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 77 01 	call	0x2ee	; 0x2ee <__floatsisf>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	38 e3       	ldi	r19, 0x38	; 56
  c6:	4c e9       	ldi	r20, 0x9C	; 156
  c8:	55 e4       	ldi	r21, 0x45	; 69
  ca:	0e 94 03 02 	call	0x406	; 0x406 <__mulsf3>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	48 ec       	ldi	r20, 0xC8	; 200
  d4:	52 e4       	ldi	r21, 0x42	; 66
  d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__divsf3>
  da:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
  de:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e6:	08 95       	ret

000000e8 <main>:

	//DUTY CYCLE 
	unsigned char DC;
	
	//set the a nibble as output 
	DDRD = 0x0F;
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	8a b9       	out	0x0a, r24	; 10

	ADC0init();
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC0init>
	initateTimer();
  f0:	0e 94 40 00 	call	0x80	; 0x80 <initateTimer>

	while (1)
	{
		//Start conversion
		ADCSRA |= (1 << ADSC);
  f4:	ca e7       	ldi	r28, 0x7A	; 122
  f6:	d0 e0       	ldi	r29, 0x00	; 0
		//wait conversion to finish
		while((ADCSRA & (1 << ADIF)) == 0);
		//Get value that was converted
		val = ADC;
  f8:	08 e7       	ldi	r16, 0x78	; 120
  fa:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			//enable power to 1,2EN
			//P.D0 and PD.1 for 1A LOW and 2A HIGH
			//BACKWARD
			PORTD =0x05;
  fc:	0f 2e       	mov	r0, r31
  fe:	f5 e0       	ldi	r31, 0x05	; 5
 100:	cf 2e       	mov	r12, r31
 102:	f0 2d       	mov	r31, r0

			//GET THE DUTY CYCLE BASED ON VOLTAGE IN
			//Then update OC1A to put DC
			DC = (uint8_t)((100.0*(1023-val))/1024);
 104:	0f 2e       	mov	r0, r31
 106:	ee 24       	eor	r14, r14
 108:	ea 94       	dec	r14
 10a:	f3 e0       	ldi	r31, 0x03	; 3
 10c:	ff 2e       	mov	r15, r31
 10e:	f0 2d       	mov	r31, r0
		if(val > 512)
		{
			//enable power to 1,2EN
			//P.D0 and PD.1 for 1A HIGH and 2A LOW
			//FOWARD
			PORTD = 0x03;
 110:	0f 2e       	mov	r0, r31
 112:	f3 e0       	ldi	r31, 0x03	; 3
 114:	df 2e       	mov	r13, r31
 116:	f0 2d       	mov	r31, r0
	initateTimer();

	while (1)
	{
		//Start conversion
		ADCSRA |= (1 << ADSC);
 118:	88 81       	ld	r24, Y
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	88 83       	st	Y, r24
		//wait conversion to finish
		while((ADCSRA & (1 << ADIF)) == 0);
 11e:	88 81       	ld	r24, Y
 120:	84 ff       	sbrs	r24, 4
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0x36>
		//Get value that was converted
		val = ADC;
 124:	f8 01       	movw	r30, r16
 126:	60 81       	ld	r22, Z
 128:	71 81       	ldd	r23, Z+1	; 0x01

		if(val > 512)
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	f2 e0       	ldi	r31, 0x02	; 2
 12e:	7f 07       	cpc	r23, r31
 130:	b8 f0       	brcs	.+46     	; 0x160 <main+0x78>
		{
			//enable power to 1,2EN
			//P.D0 and PD.1 for 1A HIGH and 2A LOW
			//FOWARD
			PORTD = 0x03;
 132:	db b8       	out	0x0b, r13	; 11

			//GET THE DUTY CYCLE BASED ON VOLTAGE IN
			//Then update OC1A to put DC
			DC = (unsigned char)((100.0*val)/1023);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 75 01 	call	0x2ea	; 0x2ea <__floatunsisf>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	48 ec       	ldi	r20, 0xC8	; 200
 142:	52 e4       	ldi	r21, 0x42	; 66
 144:	0e 94 03 02 	call	0x406	; 0x406 <__mulsf3>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 ec       	ldi	r19, 0xC0	; 192
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	54 e4       	ldi	r21, 0x44	; 68
 150:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__divsf3>
 154:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 158:	86 2f       	mov	r24, r22
			update_OC1A(DC);
 15a:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_OC1A>
 15e:	1a c0       	rjmp	.+52     	; 0x194 <main+0xac>
		else
		{
			//enable power to 1,2EN
			//P.D0 and PD.1 for 1A LOW and 2A HIGH
			//BACKWARD
			PORTD =0x05;
 160:	cb b8       	out	0x0b, r12	; 11

			//GET THE DUTY CYCLE BASED ON VOLTAGE IN
			//Then update OC1A to put DC
			DC = (uint8_t)((100.0*(1023-val))/1024);
 162:	c7 01       	movw	r24, r14
 164:	86 1b       	sub	r24, r22
 166:	97 0b       	sbc	r25, r23
 168:	bc 01       	movw	r22, r24
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 75 01 	call	0x2ea	; 0x2ea <__floatunsisf>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 ec       	ldi	r20, 0xC8	; 200
 178:	52 e4       	ldi	r21, 0x42	; 66
 17a:	0e 94 03 02 	call	0x406	; 0x406 <__mulsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e8       	ldi	r20, 0x80	; 128
 184:	5a e3       	ldi	r21, 0x3A	; 58
 186:	0e 94 03 02 	call	0x406	; 0x406 <__mulsf3>
 18a:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 18e:	86 2f       	mov	r24, r22
			update_OC1A(DC);
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_OC1A>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	9f ed       	ldi	r25, 0xDF	; 223
 196:	e2 e2       	ldi	r30, 0x22	; 34
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	91 50       	subi	r25, 0x01	; 1
 19c:	e0 40       	sbci	r30, 0x00	; 0
 19e:	f0 40       	sbci	r31, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0xb2>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xbc>
 1a4:	00 00       	nop
 1a6:	b8 cf       	rjmp	.-144    	; 0x118 <main+0x30>

000001a8 <__divsf3>:
 1a8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__divsf3x>
 1ac:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_round>
 1b0:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscB>
 1b4:	58 f0       	brcs	.+22     	; 0x1cc <__divsf3+0x24>
 1b6:	0e 94 bb 01 	call	0x376	; 0x376 <__fp_pscA>
 1ba:	40 f0       	brcs	.+16     	; 0x1cc <__divsf3+0x24>
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <__divsf3+0x20>
 1be:	5f 3f       	cpi	r21, 0xFF	; 255
 1c0:	29 f0       	breq	.+10     	; 0x1cc <__divsf3+0x24>
 1c2:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_inf>
 1c6:	51 11       	cpse	r21, r1
 1c8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>
 1cc:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_nan>

000001d0 <__divsf3x>:
 1d0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__fp_split3>
 1d4:	68 f3       	brcs	.-38     	; 0x1b0 <__divsf3+0x8>

000001d6 <__divsf3_pse>:
 1d6:	99 23       	and	r25, r25
 1d8:	b1 f3       	breq	.-20     	; 0x1c6 <__divsf3+0x1e>
 1da:	55 23       	and	r21, r21
 1dc:	91 f3       	breq	.-28     	; 0x1c2 <__divsf3+0x1a>
 1de:	95 1b       	sub	r25, r21
 1e0:	55 0b       	sbc	r21, r21
 1e2:	bb 27       	eor	r27, r27
 1e4:	aa 27       	eor	r26, r26
 1e6:	62 17       	cp	r22, r18
 1e8:	73 07       	cpc	r23, r19
 1ea:	84 07       	cpc	r24, r20
 1ec:	38 f0       	brcs	.+14     	; 0x1fc <__divsf3_pse+0x26>
 1ee:	9f 5f       	subi	r25, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	44 1f       	adc	r20, r20
 1f8:	aa 1f       	adc	r26, r26
 1fa:	a9 f3       	breq	.-22     	; 0x1e6 <__divsf3_pse+0x10>
 1fc:	35 d0       	rcall	.+106    	; 0x268 <__divsf3_pse+0x92>
 1fe:	0e 2e       	mov	r0, r30
 200:	3a f0       	brmi	.+14     	; 0x210 <__divsf3_pse+0x3a>
 202:	e0 e8       	ldi	r30, 0x80	; 128
 204:	32 d0       	rcall	.+100    	; 0x26a <__divsf3_pse+0x94>
 206:	91 50       	subi	r25, 0x01	; 1
 208:	50 40       	sbci	r21, 0x00	; 0
 20a:	e6 95       	lsr	r30
 20c:	00 1c       	adc	r0, r0
 20e:	ca f7       	brpl	.-14     	; 0x202 <__divsf3_pse+0x2c>
 210:	2b d0       	rcall	.+86     	; 0x268 <__divsf3_pse+0x92>
 212:	fe 2f       	mov	r31, r30
 214:	29 d0       	rcall	.+82     	; 0x268 <__divsf3_pse+0x92>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	88 1f       	adc	r24, r24
 21c:	bb 1f       	adc	r27, r27
 21e:	26 17       	cp	r18, r22
 220:	37 07       	cpc	r19, r23
 222:	48 07       	cpc	r20, r24
 224:	ab 07       	cpc	r26, r27
 226:	b0 e8       	ldi	r27, 0x80	; 128
 228:	09 f0       	breq	.+2      	; 0x22c <__divsf3_pse+0x56>
 22a:	bb 0b       	sbc	r27, r27
 22c:	80 2d       	mov	r24, r0
 22e:	bf 01       	movw	r22, r30
 230:	ff 27       	eor	r31, r31
 232:	93 58       	subi	r25, 0x83	; 131
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	3a f0       	brmi	.+14     	; 0x246 <__divsf3_pse+0x70>
 238:	9e 3f       	cpi	r25, 0xFE	; 254
 23a:	51 05       	cpc	r21, r1
 23c:	78 f0       	brcs	.+30     	; 0x25c <__divsf3_pse+0x86>
 23e:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_inf>
 242:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>
 246:	5f 3f       	cpi	r21, 0xFF	; 255
 248:	e4 f3       	brlt	.-8      	; 0x242 <__divsf3_pse+0x6c>
 24a:	98 3e       	cpi	r25, 0xE8	; 232
 24c:	d4 f3       	brlt	.-12     	; 0x242 <__divsf3_pse+0x6c>
 24e:	86 95       	lsr	r24
 250:	77 95       	ror	r23
 252:	67 95       	ror	r22
 254:	b7 95       	ror	r27
 256:	f7 95       	ror	r31
 258:	9f 5f       	subi	r25, 0xFF	; 255
 25a:	c9 f7       	brne	.-14     	; 0x24e <__divsf3_pse+0x78>
 25c:	88 0f       	add	r24, r24
 25e:	91 1d       	adc	r25, r1
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	97 f9       	bld	r25, 7
 266:	08 95       	ret
 268:	e1 e0       	ldi	r30, 0x01	; 1
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	bb 1f       	adc	r27, r27
 272:	62 17       	cp	r22, r18
 274:	73 07       	cpc	r23, r19
 276:	84 07       	cpc	r24, r20
 278:	ba 07       	cpc	r27, r26
 27a:	20 f0       	brcs	.+8      	; 0x284 <__divsf3_pse+0xae>
 27c:	62 1b       	sub	r22, r18
 27e:	73 0b       	sbc	r23, r19
 280:	84 0b       	sbc	r24, r20
 282:	ba 0b       	sbc	r27, r26
 284:	ee 1f       	adc	r30, r30
 286:	88 f7       	brcc	.-30     	; 0x26a <__divsf3_pse+0x94>
 288:	e0 95       	com	r30
 28a:	08 95       	ret

0000028c <__fixunssfsi>:
 28c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fp_splitA>
 290:	88 f0       	brcs	.+34     	; 0x2b4 <__fixunssfsi+0x28>
 292:	9f 57       	subi	r25, 0x7F	; 127
 294:	98 f0       	brcs	.+38     	; 0x2bc <__fixunssfsi+0x30>
 296:	b9 2f       	mov	r27, r25
 298:	99 27       	eor	r25, r25
 29a:	b7 51       	subi	r27, 0x17	; 23
 29c:	b0 f0       	brcs	.+44     	; 0x2ca <__fixunssfsi+0x3e>
 29e:	e1 f0       	breq	.+56     	; 0x2d8 <__fixunssfsi+0x4c>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	1a f0       	brmi	.+6      	; 0x2b0 <__fixunssfsi+0x24>
 2aa:	ba 95       	dec	r27
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <__fixunssfsi+0x14>
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <__fixunssfsi+0x4c>
 2b0:	b1 30       	cpi	r27, 0x01	; 1
 2b2:	91 f0       	breq	.+36     	; 0x2d8 <__fixunssfsi+0x4c>
 2b4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fp_zero>
 2b8:	b1 e0       	ldi	r27, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_zero>
 2c0:	67 2f       	mov	r22, r23
 2c2:	78 2f       	mov	r23, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	b8 5f       	subi	r27, 0xF8	; 248
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <__fixunssfsi+0x4c>
 2ca:	b9 3f       	cpi	r27, 0xF9	; 249
 2cc:	cc f3       	brlt	.-14     	; 0x2c0 <__fixunssfsi+0x34>
 2ce:	86 95       	lsr	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b3 95       	inc	r27
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <__fixunssfsi+0x42>
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__fixunssfsi+0x5c>
 2da:	90 95       	com	r25
 2dc:	80 95       	com	r24
 2de:	70 95       	com	r23
 2e0:	61 95       	neg	r22
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__floatunsisf>:
 2ea:	e8 94       	clt
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <__floatsisf+0x12>

000002ee <__floatsisf>:
 2ee:	97 fb       	bst	r25, 7
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__floatsisf+0x12>
 2f2:	90 95       	com	r25
 2f4:	80 95       	com	r24
 2f6:	70 95       	com	r23
 2f8:	61 95       	neg	r22
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	8f 4f       	sbci	r24, 0xFF	; 255
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	99 23       	and	r25, r25
 302:	a9 f0       	breq	.+42     	; 0x32e <__floatsisf+0x40>
 304:	f9 2f       	mov	r31, r25
 306:	96 e9       	ldi	r25, 0x96	; 150
 308:	bb 27       	eor	r27, r27
 30a:	93 95       	inc	r25
 30c:	f6 95       	lsr	r31
 30e:	87 95       	ror	r24
 310:	77 95       	ror	r23
 312:	67 95       	ror	r22
 314:	b7 95       	ror	r27
 316:	f1 11       	cpse	r31, r1
 318:	f8 cf       	rjmp	.-16     	; 0x30a <__floatsisf+0x1c>
 31a:	fa f4       	brpl	.+62     	; 0x35a <__floatsisf+0x6c>
 31c:	bb 0f       	add	r27, r27
 31e:	11 f4       	brne	.+4      	; 0x324 <__floatsisf+0x36>
 320:	60 ff       	sbrs	r22, 0
 322:	1b c0       	rjmp	.+54     	; 0x35a <__floatsisf+0x6c>
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	16 c0       	rjmp	.+44     	; 0x35a <__floatsisf+0x6c>
 32e:	88 23       	and	r24, r24
 330:	11 f0       	breq	.+4      	; 0x336 <__floatsisf+0x48>
 332:	96 e9       	ldi	r25, 0x96	; 150
 334:	11 c0       	rjmp	.+34     	; 0x358 <__floatsisf+0x6a>
 336:	77 23       	and	r23, r23
 338:	21 f0       	breq	.+8      	; 0x342 <__floatsisf+0x54>
 33a:	9e e8       	ldi	r25, 0x8E	; 142
 33c:	87 2f       	mov	r24, r23
 33e:	76 2f       	mov	r23, r22
 340:	05 c0       	rjmp	.+10     	; 0x34c <__floatsisf+0x5e>
 342:	66 23       	and	r22, r22
 344:	71 f0       	breq	.+28     	; 0x362 <__floatsisf+0x74>
 346:	96 e8       	ldi	r25, 0x86	; 134
 348:	86 2f       	mov	r24, r22
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	2a f0       	brmi	.+10     	; 0x35a <__floatsisf+0x6c>
 350:	9a 95       	dec	r25
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	da f7       	brpl	.-10     	; 0x350 <__floatsisf+0x62>
 35a:	88 0f       	add	r24, r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	97 f9       	bld	r25, 7
 362:	08 95       	ret

00000364 <__fp_inf>:
 364:	97 f9       	bld	r25, 7
 366:	9f 67       	ori	r25, 0x7F	; 127
 368:	80 e8       	ldi	r24, 0x80	; 128
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	08 95       	ret

00000370 <__fp_nan>:
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	80 ec       	ldi	r24, 0xC0	; 192
 374:	08 95       	ret

00000376 <__fp_pscA>:
 376:	00 24       	eor	r0, r0
 378:	0a 94       	dec	r0
 37a:	16 16       	cp	r1, r22
 37c:	17 06       	cpc	r1, r23
 37e:	18 06       	cpc	r1, r24
 380:	09 06       	cpc	r0, r25
 382:	08 95       	ret

00000384 <__fp_pscB>:
 384:	00 24       	eor	r0, r0
 386:	0a 94       	dec	r0
 388:	12 16       	cp	r1, r18
 38a:	13 06       	cpc	r1, r19
 38c:	14 06       	cpc	r1, r20
 38e:	05 06       	cpc	r0, r21
 390:	08 95       	ret

00000392 <__fp_round>:
 392:	09 2e       	mov	r0, r25
 394:	03 94       	inc	r0
 396:	00 0c       	add	r0, r0
 398:	11 f4       	brne	.+4      	; 0x39e <__fp_round+0xc>
 39a:	88 23       	and	r24, r24
 39c:	52 f0       	brmi	.+20     	; 0x3b2 <__fp_round+0x20>
 39e:	bb 0f       	add	r27, r27
 3a0:	40 f4       	brcc	.+16     	; 0x3b2 <__fp_round+0x20>
 3a2:	bf 2b       	or	r27, r31
 3a4:	11 f4       	brne	.+4      	; 0x3aa <__fp_round+0x18>
 3a6:	60 ff       	sbrs	r22, 0
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__fp_round+0x20>
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	8f 4f       	sbci	r24, 0xFF	; 255
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	08 95       	ret

000003b4 <__fp_split3>:
 3b4:	57 fd       	sbrc	r21, 7
 3b6:	90 58       	subi	r25, 0x80	; 128
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <__fp_splitA+0x10>
 3be:	5f 3f       	cpi	r21, 0xFF	; 255
 3c0:	71 f0       	breq	.+28     	; 0x3de <__fp_splitA+0x1a>
 3c2:	47 95       	ror	r20

000003c4 <__fp_splitA>:
 3c4:	88 0f       	add	r24, r24
 3c6:	97 fb       	bst	r25, 7
 3c8:	99 1f       	adc	r25, r25
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <__fp_splitA+0x20>
 3cc:	9f 3f       	cpi	r25, 0xFF	; 255
 3ce:	79 f0       	breq	.+30     	; 0x3ee <__fp_splitA+0x2a>
 3d0:	87 95       	ror	r24
 3d2:	08 95       	ret
 3d4:	12 16       	cp	r1, r18
 3d6:	13 06       	cpc	r1, r19
 3d8:	14 06       	cpc	r1, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	f2 cf       	rjmp	.-28     	; 0x3c2 <__fp_split3+0xe>
 3de:	46 95       	lsr	r20
 3e0:	f1 df       	rcall	.-30     	; 0x3c4 <__fp_splitA>
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <__fp_splitA+0x30>
 3e4:	16 16       	cp	r1, r22
 3e6:	17 06       	cpc	r1, r23
 3e8:	18 06       	cpc	r1, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	f1 cf       	rjmp	.-30     	; 0x3d0 <__fp_splitA+0xc>
 3ee:	86 95       	lsr	r24
 3f0:	71 05       	cpc	r23, r1
 3f2:	61 05       	cpc	r22, r1
 3f4:	08 94       	sec
 3f6:	08 95       	ret

000003f8 <__fp_zero>:
 3f8:	e8 94       	clt

000003fa <__fp_szero>:
 3fa:	bb 27       	eor	r27, r27
 3fc:	66 27       	eor	r22, r22
 3fe:	77 27       	eor	r23, r23
 400:	cb 01       	movw	r24, r22
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret

00000406 <__mulsf3>:
 406:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3x>
 40a:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_round>
 40e:	0e 94 bb 01 	call	0x376	; 0x376 <__fp_pscA>
 412:	38 f0       	brcs	.+14     	; 0x422 <__mulsf3+0x1c>
 414:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscB>
 418:	20 f0       	brcs	.+8      	; 0x422 <__mulsf3+0x1c>
 41a:	95 23       	and	r25, r21
 41c:	11 f0       	breq	.+4      	; 0x422 <__mulsf3+0x1c>
 41e:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_inf>
 422:	0c 94 b8 01 	jmp	0x370	; 0x370 <__fp_nan>
 426:	11 24       	eor	r1, r1
 428:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>

0000042c <__mulsf3x>:
 42c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__fp_split3>
 430:	70 f3       	brcs	.-36     	; 0x40e <__mulsf3+0x8>

00000432 <__mulsf3_pse>:
 432:	95 9f       	mul	r25, r21
 434:	c1 f3       	breq	.-16     	; 0x426 <__mulsf3+0x20>
 436:	95 0f       	add	r25, r21
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	55 1f       	adc	r21, r21
 43c:	62 9f       	mul	r22, r18
 43e:	f0 01       	movw	r30, r0
 440:	72 9f       	mul	r23, r18
 442:	bb 27       	eor	r27, r27
 444:	f0 0d       	add	r31, r0
 446:	b1 1d       	adc	r27, r1
 448:	63 9f       	mul	r22, r19
 44a:	aa 27       	eor	r26, r26
 44c:	f0 0d       	add	r31, r0
 44e:	b1 1d       	adc	r27, r1
 450:	aa 1f       	adc	r26, r26
 452:	64 9f       	mul	r22, r20
 454:	66 27       	eor	r22, r22
 456:	b0 0d       	add	r27, r0
 458:	a1 1d       	adc	r26, r1
 45a:	66 1f       	adc	r22, r22
 45c:	82 9f       	mul	r24, r18
 45e:	22 27       	eor	r18, r18
 460:	b0 0d       	add	r27, r0
 462:	a1 1d       	adc	r26, r1
 464:	62 1f       	adc	r22, r18
 466:	73 9f       	mul	r23, r19
 468:	b0 0d       	add	r27, r0
 46a:	a1 1d       	adc	r26, r1
 46c:	62 1f       	adc	r22, r18
 46e:	83 9f       	mul	r24, r19
 470:	a0 0d       	add	r26, r0
 472:	61 1d       	adc	r22, r1
 474:	22 1f       	adc	r18, r18
 476:	74 9f       	mul	r23, r20
 478:	33 27       	eor	r19, r19
 47a:	a0 0d       	add	r26, r0
 47c:	61 1d       	adc	r22, r1
 47e:	23 1f       	adc	r18, r19
 480:	84 9f       	mul	r24, r20
 482:	60 0d       	add	r22, r0
 484:	21 1d       	adc	r18, r1
 486:	82 2f       	mov	r24, r18
 488:	76 2f       	mov	r23, r22
 48a:	6a 2f       	mov	r22, r26
 48c:	11 24       	eor	r1, r1
 48e:	9f 57       	subi	r25, 0x7F	; 127
 490:	50 40       	sbci	r21, 0x00	; 0
 492:	9a f0       	brmi	.+38     	; 0x4ba <__mulsf3_pse+0x88>
 494:	f1 f0       	breq	.+60     	; 0x4d2 <__mulsf3_pse+0xa0>
 496:	88 23       	and	r24, r24
 498:	4a f0       	brmi	.+18     	; 0x4ac <__mulsf3_pse+0x7a>
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	bb 1f       	adc	r27, r27
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	91 50       	subi	r25, 0x01	; 1
 4a8:	50 40       	sbci	r21, 0x00	; 0
 4aa:	a9 f7       	brne	.-22     	; 0x496 <__mulsf3_pse+0x64>
 4ac:	9e 3f       	cpi	r25, 0xFE	; 254
 4ae:	51 05       	cpc	r21, r1
 4b0:	80 f0       	brcs	.+32     	; 0x4d2 <__mulsf3_pse+0xa0>
 4b2:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_inf>
 4b6:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_szero>
 4ba:	5f 3f       	cpi	r21, 0xFF	; 255
 4bc:	e4 f3       	brlt	.-8      	; 0x4b6 <__mulsf3_pse+0x84>
 4be:	98 3e       	cpi	r25, 0xE8	; 232
 4c0:	d4 f3       	brlt	.-12     	; 0x4b6 <__mulsf3_pse+0x84>
 4c2:	86 95       	lsr	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b7 95       	ror	r27
 4ca:	f7 95       	ror	r31
 4cc:	e7 95       	ror	r30
 4ce:	9f 5f       	subi	r25, 0xFF	; 255
 4d0:	c1 f7       	brne	.-16     	; 0x4c2 <__mulsf3_pse+0x90>
 4d2:	fe 2b       	or	r31, r30
 4d4:	88 0f       	add	r24, r24
 4d6:	91 1d       	adc	r25, r1
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
