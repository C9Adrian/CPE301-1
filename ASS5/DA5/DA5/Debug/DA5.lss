
DA5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000004f8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001210  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078a  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000813  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000035bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  8e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <sendData>:
	_delay_ms(1000);
	lcd_gotoxy(1,1);
	lcd_print("Text for line 1.");
	lcd_gotoxy(1,2);
	lcd_print("Text for line 2.");
	while(1);			//stay here forever
  96:	15 b8       	out	0x05, r1	; 5
  98:	44 98       	cbi	0x08, 4	; 8
  9a:	45 98       	cbi	0x08, 5	; 8
  9c:	80 fd       	sbrc	r24, 0
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <sendData+0x10>
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	95 b9       	out	0x05, r25	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <sendData+0x12>
  a6:	28 9a       	sbi	0x05, 0	; 5
  a8:	81 fd       	sbrc	r24, 1
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <sendData+0x1c>
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <sendData+0x1e>
  b2:	29 9a       	sbi	0x05, 1	; 5
  b4:	82 fd       	sbrc	r24, 2
  b6:	03 c0       	rjmp	.+6      	; 0xbe <sendData+0x28>
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <sendData+0x2a>
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	83 fd       	sbrc	r24, 3
  c2:	03 c0       	rjmp	.+6      	; 0xca <sendData+0x34>
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	01 c0       	rjmp	.+2      	; 0xcc <sendData+0x36>
  ca:	2b 9a       	sbi	0x05, 3	; 5
  cc:	84 fd       	sbrc	r24, 4
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <sendData+0x40>
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	95 b9       	out	0x05, r25	; 5
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <sendData+0x42>
  d6:	2c 9a       	sbi	0x05, 4	; 5
  d8:	85 fd       	sbrc	r24, 5
  da:	03 c0       	rjmp	.+6      	; 0xe2 <sendData+0x4c>
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	95 b9       	out	0x05, r25	; 5
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <sendData+0x4e>
  e2:	2d 9a       	sbi	0x05, 5	; 5
  e4:	86 fd       	sbrc	r24, 6
  e6:	03 c0       	rjmp	.+6      	; 0xee <sendData+0x58>
  e8:	98 b1       	in	r25, 0x08	; 8
  ea:	98 b9       	out	0x08, r25	; 8
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <sendData+0x5a>
  ee:	44 9a       	sbi	0x08, 4	; 8
  f0:	88 23       	and	r24, r24
  f2:	1c f0       	brlt	.+6      	; 0xfa <sendData+0x64>
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	88 b9       	out	0x08, r24	; 8
  f8:	08 95       	ret
  fa:	45 9a       	sbi	0x08, 5	; 8
  fc:	08 95       	ret

000000fe <lcdCommand>:
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 4b 00 	call	0x96	; 0x96 <sendData>
 104:	40 98       	cbi	0x08, 0	; 8
 106:	41 98       	cbi	0x08, 1	; 8
 108:	42 9a       	sbi	0x08, 2	; 8
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcdCommand+0xe>
 110:	00 00       	nop
 112:	42 98       	cbi	0x08, 2	; 8
 114:	8f e8       	ldi	r24, 0x8F	; 143
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcdCommand+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcdCommand+0x20>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcd_init>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	84 b9       	out	0x04, r24	; 4
 126:	87 b9       	out	0x07, r24	; 7
 128:	42 98       	cbi	0x08, 2	; 8
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9f e1       	ldi	r25, 0x1F	; 31
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0xc>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x12>
 134:	00 00       	nop
 136:	88 e3       	ldi	r24, 0x38	; 56
 138:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9f e1       	ldi	r25, 0x1F	; 31
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x24>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x2a>
 14c:	00 00       	nop
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 154:	08 95       	ret

00000156 <lcd_gotoxy>:
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <lcd_gotoxy+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <lcd_gotoxy+0x8>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	90 e8       	ldi	r25, 0x80	; 128
 164:	99 83       	std	Y+1, r25	; 0x01
 166:	90 ec       	ldi	r25, 0xC0	; 192
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	94 e9       	ldi	r25, 0x94	; 148
 16c:	9b 83       	std	Y+3, r25	; 0x03
 16e:	94 ed       	ldi	r25, 0xD4	; 212
 170:	9c 83       	std	Y+4, r25	; 0x04
 172:	81 50       	subi	r24, 0x01	; 1
 174:	fe 01       	movw	r30, r28
 176:	e6 0f       	add	r30, r22
 178:	f1 1d       	adc	r31, r1
 17a:	90 81       	ld	r25, Z
 17c:	89 0f       	add	r24, r25
 17e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_gotoxy+0x30>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_gotoxy+0x36>
 18c:	00 00       	nop
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_reset>:
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdCommand>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <lcd_reset+0x12>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_reset+0x1c>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

000001bc <lcdData>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <sendData>
 1c2:	40 9a       	sbi	0x08, 0	; 8
 1c4:	41 98       	cbi	0x08, 1	; 8
 1c6:	42 9a       	sbi	0x08, 2	; 8
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcdData+0xe>
 1ce:	00 00       	nop
 1d0:	42 98       	cbi	0x08, 2	; 8
 1d2:	8f e8       	ldi	r24, 0x8F	; 143
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcdData+0x1a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcdData+0x20>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <lcd_print>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	59 f0       	breq	.+22     	; 0x204 <lcd_print+0x24>
 1ee:	8f 01       	movw	r16, r30
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcdData>
 1f6:	cf 5f       	subi	r28, 0xFF	; 255
 1f8:	f8 01       	movw	r30, r16
 1fa:	ec 0f       	add	r30, r28
 1fc:	f1 1d       	adc	r31, r1
 1fe:	80 81       	ld	r24, Z
 200:	81 11       	cpse	r24, r1
 202:	f7 cf       	rjmp	.-18     	; 0x1f2 <lcd_print+0x12>
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <printError>:
		}
		return 0;
}

void printError(char *str)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
	lcd_init();
 212:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
	lcd_reset();
 216:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_reset>
	lcd_print(str);
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>
	lcd_gotoxy(1,2);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_gotoxy>
	lcd_print("Wrong Pin!!");
 228:	82 e7       	ldi	r24, 0x72	; 114
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	87 ea       	ldi	r24, 0xA7	; 167
 234:	91 e6       	ldi	r25, 0x61	; 97
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <printError+0x2a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <printError+0x34>
 240:	00 00       	nop
	_delay_ms(2000);
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <Correct>:

void Correct(char *str){
 248:	ec 01       	movw	r28, r24

	lcd_init();
 24a:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
	lcd_reset();
 24e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_reset>
	lcd_print(str);
 252:	ce 01       	movw	r24, r28
 254:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>
	lcd_gotoxy(1,2);
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_gotoxy>
	lcd_print("Access Granted!!");
 260:	8e e7       	ldi	r24, 0x7E	; 126
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>
	while(1);
 268:	ff cf       	rjmp	.-2      	; 0x268 <Correct+0x20>

0000026a <main>:
							{'3','6','9','#'},
							{'A','B','C','D'}
							};

int main(void)
{	
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <main+0x6>
 270:	00 d0       	rcall	.+0      	; 0x272 <main+0x8>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
		lcd_init();
 276:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
		lcd_reset();
 27a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_reset>
		lcd_print("Input Pin");
 27e:	8f e8       	ldi	r24, 0x8F	; 143
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>

		unsigned char col,row = 0;
		unsigned char count = 0; 
		unsigned char pin[4] = {0};
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	1a 82       	std	Y+2, r1	; 0x02
 28a:	1b 82       	std	Y+3, r1	; 0x03
 28c:	1c 82       	std	Y+4, r1	; 0x04
		lcd_init();
		lcd_reset();
		lcd_print("Input Pin");

		unsigned char col,row = 0;
		unsigned char count = 0; 
 28e:	b1 2c       	mov	r11, r1
					pin[4] = pin[3] = pin[2]= pin[1]= 0;
				}

				//Establish the Inputs and outputs
				//to the keypad
				KEYDDR =  0xF0;
 290:	0f 2e       	mov	r0, r31
 292:	f0 ef       	ldi	r31, 0xF0	; 240
 294:	9f 2e       	mov	r9, r31
 296:	f0 2d       	mov	r31, r0
				KEYPORT = 0xFF;
 298:	aa 24       	eor	r10, r10
 29a:	aa 94       	dec	r10
				 col = (KEYPIN & 0x0F);				//read columns
			 } while (col == 0x0F);					//wait for key press

			while(1)
			{
				 KEYPORT = 0xEF;		 //ground row 0
 29c:	1f ee       	ldi	r17, 0xEF	; 239
				 if (col != 0x0F)		 //column detected
				 {
					 row = 0;			 //save row location
					 break;				 //exit while loop
				 }
				 KEYPORT = 0xDF;		 //ground row 1
 29e:	0f ed       	ldi	r16, 0xDF	; 223
				 if(col != 0x0F)		 //column detected
				 {
					 row = 1;			 //save row location
					 break;				 //exit while loop
				 }
				 KEYPORT = 0xBF;		//ground row 2
 2a0:	0f 2e       	mov	r0, r31
 2a2:	ff eb       	ldi	r31, 0xBF	; 191
 2a4:	df 2e       	mov	r13, r31
 2a6:	f0 2d       	mov	r31, r0
				 {
					 row = 2;		//save row location
					 break;			//exit while loop
				 }

				 KEYPORT = 0x7F;		//ground row 3
 2a8:	0f 2e       	mov	r0, r31
 2aa:	ff e7       	ldi	r31, 0x7F	; 127
 2ac:	cf 2e       	mov	r12, r31
 2ae:	f0 2d       	mov	r31, r0
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F); //read the columns
				if(col!= 0x0F)
				 {
					row = 3;				//save row location
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f3 e0       	ldi	r31, 0x03	; 3
 2b4:	6f 2e       	mov	r6, r31
 2b6:	f0 2d       	mov	r31, r0
			 else
				pin[count] = (keypad[row][3]);

			if(count < 3)
			{
				lcdData(pin[count]);
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	7c 01       	movw	r14, r24
								printError(pin);
								count = 0;
								goto start;
							}
							 break;
					 case 1:if(pin[i] != '2'){
 2be:	71 2c       	mov	r7, r1
 2c0:	81 2c       	mov	r8, r1
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <main+0x5c>
								goto start;
							}
							else
								Correct(pin);
							break;
					default:count = 0;goto start;break;
 2c4:	b1 2c       	mov	r11, r1
		unsigned char pin[4] = {0};

		while(1)
		{
			start:
				if(count == 0)
 2c6:	b1 10       	cpse	r11, r1
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <main+0x80>
				{

					lcd_init();
 2ca:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
					lcd_reset();
 2ce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_reset>
					lcd_print("Input Pin");
 2d2:	8f e8       	ldi	r24, 0x8F	; 143
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_print>
					lcd_gotoxy(1,2);
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_gotoxy>
					col = row = 0;
					pin[4] = pin[3] = pin[2]= pin[1]= 0;
 2e2:	1a 82       	std	Y+2, r1	; 0x02
 2e4:	1b 82       	std	Y+3, r1	; 0x03
 2e6:	1c 82       	std	Y+4, r1	; 0x04
 2e8:	1d 82       	std	Y+5, r1	; 0x05
				}

				//Establish the Inputs and outputs
				//to the keypad
				KEYDDR =  0xF0;
 2ea:	9a b8       	out	0x0a, r9	; 10
				KEYPORT = 0xFF;
 2ec:	ab b8       	out	0x0b, r10	; 11
			 * released. 

			*/
			do 
			{
				KEYPORT &= 0x0F;
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	8b b9       	out	0x0b, r24	; 11
				col = (KEYPIN & 0x0F); 
 2f4:	89 b1       	in	r24, 0x09	; 9
 2f6:	8f 70       	andi	r24, 0x0F	; 15

			}while(col != 0x0F);
 2f8:	8f 30       	cpi	r24, 0x0F	; 15
 2fa:	c9 f7       	brne	.-14     	; 0x2ee <main+0x84>
 2fc:	9f ef       	ldi	r25, 0xFF	; 255
 2fe:	29 ef       	ldi	r18, 0xF9	; 249
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	91 50       	subi	r25, 0x01	; 1
 304:	20 40       	sbci	r18, 0x00	; 0
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x98>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0xa2>
 30c:	00 00       	nop
			 do
			 {
				 do
				 {
					 _delay_ms(20);					//call delay
					 col = (KEYPIN & 0x0F);			//see if any key is pressed
 30e:	99 b1       	in	r25, 0x09	; 9
 310:	9f 70       	andi	r25, 0x0F	; 15
				 } while (col == 0x0F);				//keep checking for key press
 312:	9f 30       	cpi	r25, 0x0F	; 15
 314:	99 f3       	breq	.-26     	; 0x2fc <main+0x92>
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	29 ef       	ldi	r18, 0xF9	; 249
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 50       	subi	r25, 0x01	; 1
 31e:	20 40       	sbci	r18, 0x00	; 0
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0xb2>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0xbc>
 326:	00 00       	nop

				 _delay_ms(20);						//call delay for de-bounce
				 col = (KEYPIN & 0x0F);				//read columns
 328:	89 b1       	in	r24, 0x09	; 9
 32a:	8f 70       	andi	r24, 0x0F	; 15
			 } while (col == 0x0F);					//wait for key press
 32c:	8f 30       	cpi	r24, 0x0F	; 15
 32e:	31 f3       	breq	.-52     	; 0x2fc <main+0x92>

			while(1)
			{
				 KEYPORT = 0xEF;		 //ground row 0
 330:	1b b9       	out	0x0b, r17	; 11
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	29 ef       	ldi	r18, 0xF9	; 249
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xce>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xd8>
 342:	00 00       	nop
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F);	 //read the columns
 344:	99 b1       	in	r25, 0x09	; 9
 346:	9f 70       	andi	r25, 0x0F	; 15
				 if (col != 0x0F)		 //column detected
 348:	9f 30       	cpi	r25, 0x0F	; 15
 34a:	09 f0       	breq	.+2      	; 0x34e <main+0xe4>
 34c:	b4 c0       	rjmp	.+360    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				 {
					 row = 0;			 //save row location
					 break;				 //exit while loop
				 }
				 KEYPORT = 0xDF;		 //ground row 1
 34e:	0b b9       	out	0x0b, r16	; 11
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	29 ef       	ldi	r18, 0xF9	; 249
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	91 50       	subi	r25, 0x01	; 1
 358:	20 40       	sbci	r18, 0x00	; 0
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0xec>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0xf6>
 360:	00 00       	nop
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F);  //read the columns
 362:	99 b1       	in	r25, 0x09	; 9
 364:	9f 70       	andi	r25, 0x0F	; 15
				 if(col != 0x0F)		 //column detected
 366:	9f 30       	cpi	r25, 0x0F	; 15
 368:	09 f0       	breq	.+2      	; 0x36c <main+0x102>
 36a:	a7 c0       	rjmp	.+334    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				 {
					 row = 1;			 //save row location
					 break;				 //exit while loop
				 }
				 KEYPORT = 0xBF;		//ground row 2
 36c:	db b8       	out	0x0b, r13	; 11
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	29 ef       	ldi	r18, 0xF9	; 249
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	91 50       	subi	r25, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x10a>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x114>
 37e:	00 00       	nop
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F); //read the columns
 380:	99 b1       	in	r25, 0x09	; 9
 382:	9f 70       	andi	r25, 0x0F	; 15
				 if(col != 0x0F)		//column detected
 384:	9f 30       	cpi	r25, 0x0F	; 15
 386:	09 f0       	breq	.+2      	; 0x38a <main+0x120>
 388:	9a c0       	rjmp	.+308    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				 {
					 row = 2;		//save row location
					 break;			//exit while loop
				 }

				 KEYPORT = 0x7F;		//ground row 3
 38a:	cb b8       	out	0x0b, r12	; 11
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	29 ef       	ldi	r18, 0xF9	; 249
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 50       	subi	r25, 0x01	; 1
 394:	20 40       	sbci	r18, 0x00	; 0
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x128>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x132>
 39c:	00 00       	nop
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F); //read the columns
 39e:	99 b1       	in	r25, 0x09	; 9
 3a0:	9f 70       	andi	r25, 0x0F	; 15
				if(col!= 0x0F)
 3a2:	9f 30       	cpi	r25, 0x0F	; 15
 3a4:	29 f2       	breq	.-118    	; 0x330 <main+0xc6>
 3a6:	8d c0       	rjmp	.+282    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				for(int i = 0; i < 3; i = i +1)
				{
					switch(i)
					{
					 case 0: if(pin[i] != '5'){
 3a8:	39 81       	ldd	r19, Y+1	; 0x01
								printError(pin);
								count = 0;
								goto start;
							}
							 break;
					 case 1:if(pin[i] != '2'){
 3aa:	2a 81       	ldd	r18, Y+2	; 0x02
 3ac:	87 2d       	mov	r24, r7
 3ae:	98 2d       	mov	r25, r8

			if(count >= 3)
			{
				for(int i = 0; i < 3; i = i +1)
				{
					switch(i)
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	91 05       	cpc	r25, r1
 3b4:	d1 f0       	breq	.+52     	; 0x3ea <main+0x180>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	91 05       	cpc	r25, r1
 3ba:	59 f1       	breq	.+86     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x158>
 3c0:	81 cf       	rjmp	.-254    	; 0x2c4 <main+0x5a>
					{
					 case 0: if(pin[i] != '5'){
 3c2:	35 33       	cpi	r19, 0x35	; 53
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <main+0x15e>
 3c6:	83 c0       	rjmp	.+262    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
								lcdData(pin);
 3c8:	8e 2d       	mov	r24, r14
 3ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcdData>
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	23 ed       	ldi	r18, 0xD3	; 211
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x16a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x174>
 3de:	00 00       	nop
								_delay_ms(1000);
								printError(pin);
 3e0:	c7 01       	movw	r24, r14
 3e2:	0e 94 06 01 	call	0x20c	; 0x20c <printError>
								count = 0;
 3e6:	b1 2c       	mov	r11, r1
								goto start;
 3e8:	6e cf       	rjmp	.-292    	; 0x2c6 <main+0x5c>
							}
							 break;
					 case 1:if(pin[i] != '2'){
 3ea:	22 33       	cpi	r18, 0x32	; 50
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <main+0x186>
 3ee:	6f c0       	rjmp	.+222    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
								 lcdData(pin);
 3f0:	8e 2d       	mov	r24, r14
 3f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcdData>
 3f6:	9f ef       	ldi	r25, 0xFF	; 255
 3f8:	23 ed       	ldi	r18, 0xD3	; 211
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	91 50       	subi	r25, 0x01	; 1
 3fe:	20 40       	sbci	r18, 0x00	; 0
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x192>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
								 _delay_ms(1000);
								printError(pin);
 408:	c7 01       	movw	r24, r14
 40a:	0e 94 06 01 	call	0x20c	; 0x20c <printError>
								count = 0;
 40e:	b1 2c       	mov	r11, r1
								goto start;
 410:	5a cf       	rjmp	.-332    	; 0x2c6 <main+0x5c>
							}
							break;
						
					 case 2:if(pin[i] != '7'){
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	87 33       	cpi	r24, 0x37	; 55
 416:	89 f0       	breq	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
								lcdData(pin);
 418:	8e 2d       	mov	r24, r14
 41a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcdData>
 41e:	9f ef       	ldi	r25, 0xFF	; 255
 420:	23 ed       	ldi	r18, 0xD3	; 211
 422:	80 e3       	ldi	r24, 0x30	; 48
 424:	91 50       	subi	r25, 0x01	; 1
 426:	20 40       	sbci	r18, 0x00	; 0
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
								_delay_ms(1000);
								printError(pin);
 430:	c7 01       	movw	r24, r14
 432:	0e 94 06 01 	call	0x20c	; 0x20c <printError>
								count = 0;
 436:	b1 2c       	mov	r11, r1
								goto start;
 438:	46 cf       	rjmp	.-372    	; 0x2c6 <main+0x5c>
							}
							else
								Correct(pin);
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 24 01 	call	0x248	; 0x248 <Correct>
				goto start;
			}
			

			 //check column and send result to Port D
			 if(col == 0x0E)
 442:	9e 30       	cpi	r25, 0x0E	; 14
 444:	69 f4       	brne	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				 pin[count] = (keypad[row][0]);
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	e0 50       	subi	r30, 0x00	; 0
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	80 81       	ld	r24, Z
 456:	f7 01       	movw	r30, r14
 458:	eb 0d       	add	r30, r11
 45a:	f1 1d       	adc	r31, r1
 45c:	80 83       	st	Z, r24
 45e:	39 c0       	rjmp	.+114    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			 else if(col == 0x0D)
 460:	9d 30       	cpi	r25, 0x0D	; 13
 462:	69 f4       	brne	.+26     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				pin[count] = (keypad[row][1]);
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e0 50       	subi	r30, 0x00	; 0
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	81 81       	ldd	r24, Z+1	; 0x01
 474:	f7 01       	movw	r30, r14
 476:	eb 0d       	add	r30, r11
 478:	f1 1d       	adc	r31, r1
 47a:	80 83       	st	Z, r24
 47c:	2a c0       	rjmp	.+84     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			 else if(col == 0x0B)
 47e:	9b 30       	cpi	r25, 0x0B	; 11
 480:	69 f4       	brne	.+26     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				 pin[count] = (keypad[row][2]);
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	e0 50       	subi	r30, 0x00	; 0
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	82 81       	ldd	r24, Z+2	; 0x02
 492:	f7 01       	movw	r30, r14
 494:	eb 0d       	add	r30, r11
 496:	f1 1d       	adc	r31, r1
 498:	80 83       	st	Z, r24
 49a:	1b c0       	rjmp	.+54     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			 else
				pin[count] = (keypad[row][3]);
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e0 50       	subi	r30, 0x00	; 0
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	83 81       	ldd	r24, Z+3	; 0x03
 4ac:	f7 01       	movw	r30, r14
 4ae:	eb 0d       	add	r30, r11
 4b0:	f1 1d       	adc	r31, r1
 4b2:	80 83       	st	Z, r24
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				 KEYPORT = 0xEF;		 //ground row 0
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F);	 //read the columns
				 if (col != 0x0F)		 //column detected
				 {
					 row = 0;			 //save row location
 4b6:	e0 e0       	ldi	r30, 0x00	; 0
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				 KEYPORT = 0xDF;		 //ground row 1
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F);  //read the columns
				 if(col != 0x0F)		 //column detected
				 {
					 row = 1;			 //save row location
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				 KEYPORT = 0xBF;		//ground row 2
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F); //read the columns
				 if(col != 0x0F)		//column detected
				 {
					 row = 2;		//save row location
 4be:	e2 e0       	ldi	r30, 0x02	; 2
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				 KEYPORT = 0x7F;		//ground row 3
				 _delay_ms(20);
				 col = (KEYPIN & 0x0F); //read the columns
				if(col!= 0x0F)
				 {
					row = 3;				//save row location
 4c2:	e6 2d       	mov	r30, r6
					break;					//exit while loop
				}

			}

			if(count >= 3)
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	2b 15       	cp	r18, r11
 4c8:	08 f4       	brcc	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	6e cf       	rjmp	.-292    	; 0x3a8 <main+0x13e>
 4cc:	ba cf       	rjmp	.-140    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				for(int i = 0; i < 3; i = i +1)
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	6f cf       	rjmp	.-290    	; 0x3b0 <main+0x146>
			 else
				pin[count] = (keypad[row][3]);

			if(count < 3)
			{
				lcdData(pin[count]);
 4d2:	f7 01       	movw	r30, r14
 4d4:	eb 0d       	add	r30, r11
 4d6:	f1 1d       	adc	r31, r1
 4d8:	80 81       	ld	r24, Z
 4da:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcdData>
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	99 e6       	ldi	r25, 0x69	; 105
 4e2:	28 e1       	ldi	r18, 0x18	; 24
 4e4:	81 50       	subi	r24, 0x01	; 1
 4e6:	90 40       	sbci	r25, 0x00	; 0
 4e8:	20 40       	sbci	r18, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
				_delay_ms(500);
			}	
			 ++count;						
 4f0:	b3 94       	inc	r11
		}
 4f2:	e9 ce       	rjmp	.-558    	; 0x2c6 <main+0x5c>

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
