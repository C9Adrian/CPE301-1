
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afc  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000777  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b0  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000176  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  8e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdCommand>:
#define LCD_EN  2      //LCD EN   (PC.2)


//**************************************************************** 
void lcdCommand (unsigned char cmd) {  
	LCD_DPRT = cmd;				//send cmd to data port  
  96:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT &= ~(1<<LCD_RS);   //RS = 0 for command  
  98:	40 98       	cbi	0x08, 0	; 8
	LCD_CPRT &= ~(1<<LCD_RW);   //RW = 0 for write   
  9a:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN);    //EN = 1 for H-to-L pulse  
  9c:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdCommand+0xa>
  a4:	00 00       	nop
	_delay_us(1);					//wait to make enable wide  
	LCD_CPRT &= ~(1<<LCD_EN);   //EN = 0 for H-to_L pulse  
  a6:	42 98       	cbi	0x08, 2	; 8
  a8:	8f e8       	ldi	r24, 0x8F	; 143
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcdCommand+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcdCommand+0x1c>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <lcdData>:
	_delay_us(100);				//wait to make enable wide 
} 
 
void lcdData(unsigned char data) {  
	LCD_DPRT = data;				//send data to data port  
  b6:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT |= (1<<LCD_RS);		//RS = 1 for data  
  b8:	40 9a       	sbi	0x08, 0	; 8
	LCD_CPRT &= ~(1<<LCD_RW);   //RW = 0 for write   
  ba:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN);		//EN = 1 for H-to-L pulse  
  bc:	42 9a       	sbi	0x08, 2	; 8
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcdData+0xa>
  c4:	00 00       	nop
	_delay_us(1);					//wait to make enable wide  
	LCD_CPRT &= ~(1<<LCD_EN);   //EN = 0 for H-to_L pulse  
  c6:	42 98       	cbi	0x08, 2	; 8
  c8:	8f e8       	ldi	r24, 0x8F	; 143
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdData+0x16>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdData+0x1c>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_init>:
	_delay_us(100);				//wait to make enable wide  
} 

void lcd_init() {  
	LCD_DDDR = 0xFF;  
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a b9       	out	0x0a, r24	; 10
	LCD_CDDR = 0xFF;    
  da:	87 b9       	out	0x07, r24	; 7
	LCD_CPRT &=~(1<<LCD_EN);   //LCD_EN = 0  
  dc:	42 98       	cbi	0x08, 2	; 8
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9f e1       	ldi	r25, 0x1F	; 31
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_init+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_init+0x12>
  e8:	00 00       	nop
	_delay_us(2000);    
	//wait for init  
	lcdCommand(0x38);   //initialize LCD 2 line, 5x7  
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x0E);   //display on, cursor on  
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x01);   //clear LCD  
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x2a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x30>
 106:	00 00       	nop
	_delay_us(2000);		 //wait  
	lcdCommand(0x06);   //shift cursor right 
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 10e:	08 95       	ret

00000110 <lcd_print>:
} 
 
void lcd_print(char * str) {  
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	fc 01       	movw	r30, r24
	unsigned char i = 0;  
	
	while (str[i]!=0)  {   
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	59 f0       	breq	.+22     	; 0x134 <lcd_print+0x24>
 11e:	8f 01       	movw	r16, r30
 120:	c0 e0       	ldi	r28, 0x00	; 0
		lcdData(str[i]); i++;  
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdData>
 126:	cf 5f       	subi	r28, 0xFF	; 255
} 
 
void lcd_print(char * str) {  
	unsigned char i = 0;  
	
	while (str[i]!=0)  {   
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	f1 1d       	adc	r31, r1
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <lcd_print+0x12>
		lcdData(str[i]); i++;  
	}
} 
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <lcd_gotoxy>:

// go to specific LCD locations
void lcd_gotoxy(unsigned char x, unsigned char y) {  
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <lcd_gotoxy+0x6>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0};   // locations of the first character of each line
 146:	90 e8       	ldi	r25, 0x80	; 128
 148:	99 83       	std	Y+1, r25	; 0x01
 14a:	90 ec       	ldi	r25, 0xC0	; 192
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	81 50       	subi	r24, 0x01	; 1
	
	lcdCommand(firstCharAdr[y-1] + x-1);  
 150:	fe 01       	movw	r30, r28
 152:	e6 0f       	add	r30, r22
 154:	f1 1d       	adc	r31, r1
 156:	90 81       	ld	r25, Z
 158:	89 0f       	add	r24, r25
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 15e:	8f e8       	ldi	r24, 0x8F	; 143
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_gotoxy+0x26>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_gotoxy+0x2c>
 168:	00 00       	nop
	_delay_us(100); 
} 
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <main>:


int main(void) {  
	// initialize LCD
	lcd_init();			  
 174:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_init>
	lcd_print("Demo code");		// print some sample code on LCD
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	89 e6       	ldi	r24, 0x69	; 105
 184:	98 e1       	ldi	r25, 0x18	; 24
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x12>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x1c>
 190:	00 00       	nop
	_delay_ms(500);

	// clear the LCD and print some more text
	lcdCommand(0x01);   //clear LCD
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x02);   // return home: returns the cursor to the home position
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcd_print("Here is some more text that overruns a single line...");		// print text that overruns a single line
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_print>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	89 e6       	ldi	r24, 0x69	; 105
 1aa:	98 e1       	ldi	r25, 0x18	; 24
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x38>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x42>
 1b6:	00 00       	nop
	_delay_ms(500);

	// print text at a specific location on LCD (1st line, then 2nd line)
	lcd_gotoxy(1,1);  
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_gotoxy>
	lcd_print("Text for line 1.");  
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_print>
	//lcd_gotoxy(1,2);  
	//lcd_print("Text for line 2.");   
	
	while(1);    //stay here forever  
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x54>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
